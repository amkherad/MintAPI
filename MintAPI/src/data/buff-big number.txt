'@PROJECT_LICENSE

Option Base 0
Option Explicit
Const CLASSID As String = "BigNumber"
Const CLASSALIAS As String = APPLICATIONDOMAIN & "." & CLASSID
Const CLASSVERSIONSTRING As String = "0.1"
Const CLASSALIASSTRING As String = CLASSALIAS & "/" & CLASSVERSIONSTRING

Implements IClassClonable
Implements IClassTexer
Implements IAliasable


Const EXTRA_BUFFER As Long = 5
Const NEGATIVE_SIGN As Long = 45
Const POSITIVE_SIGN As Long = 43
Const POINT_SIGN As Long = 46
Const SCIENTIFIC_Ec As Long = 69
Const SCIENTIFIC_E As Long = 101
Const SCIENTIFIC_Fc As Long = 70
Const SCIENTIFIC_F As Long = 102

'Numbers save from 0(NULL) to 9(...)

Private Enum BIGNUM_SIGN
    sNegative = -1
    sZero = 0
    sPositive = 1
End Enum

'Save number as scientific.
Private Type BIGNUM_STRUCT
    Sign As BIGNUM_SIGN
    
    dblDotIndex As Long
    
    B As ByteArray
    base_N As Long
    
    Se As Long 'Scientific E
    
    Floatable As Boolean
    show_pos_sign As Boolean
End Type

Private n As BIGNUM_STRUCT

Friend Function GetStruct() As BIGNUM_STRUCT
    GetStruct = n
End Function

Friend Sub InitializeW(bnStruct As BIGNUM_STRUCT)
    n = bnStruct
    If n.B Is Nothing Then Set n.B = New ByteArray
End Sub
Friend Sub Initialize(Optional InitialValue)
    If Not IsMissing(InitialValue) Then Call SetLocalValue(InitialValue)
    If n.B Is Nothing Then Set n.B = New ByteArray
End Sub
Private Sub Class_Initialize()
    Set n.B = New ByteArray
End Sub

Friend Sub internal_SetBytes(B() As Byte)
    Call n.B.setBuffer(B())
End Sub
Friend Sub internal_reserveBytesAtEnd(Length As Long)
    Dim appended_bytes() As Byte
    ReDim appended_bytes(Length - 1)
    Call n.B.Append(appended_bytes)
End Sub
Friend Sub internal_appendBytes(B() As Byte)
    Call n.B.Append(B())
End Sub
Friend Function GetByteArray() As ByteArray
    Set GetByteArray = n.B
End Function
Friend Function internal_validate(B As ByteArray, Optional ValidateNonScientific As Boolean = False) As Boolean
    If B.Length = 0 Then
        internal_validate = False
        Exit Function
    End If
    Dim i As Long, byteVal As Byte
    For i = 0 To B.Length - 1
        byteVal = B(i)
        If byteVal <= 9 Then Exit For
        If ((byteVal >= 48) And (byteVal <= 57)) Then Exit For
        If byteVal = POINT_SIGN Then Exit For
        If byteVal = SCIENTIFIC_E Then Exit For
        If byteVal = SCIENTIFIC_Ec Then Exit For
        If byteVal = SCIENTIFIC_F Then Exit For
        If byteVal = SCIENTIFIC_Fc Then Exit For
        If byteVal = NEGATIVE_SIGN Then Exit For
        If byteVal = POSITIVE_SIGN Then Exit For
        '---------------------------------------
        internal_validate = False
        Exit Function
    Next
    internal_validate = True
End Function
Private Sub internal_clean()
    Dim i As Long
    For i = 0 To n.B.Length - 1
        If n.B(i) <> 0 Then
            n.Se = n.Se + i
            Set n.B = n.B.SubArray(i)
        End If
    Next
End Sub

'=====================================================
'=====================================================

Public Function Clone() As BigNumber
    Dim dup As New BigNumber
    Dim dupN As BIGNUM_STRUCT
    dupN = n
    Set dupN.B = n.B.Clone
    If IsZero Then
        Call dup.Initialize
    Else
        Call dup.InitializeW(n)
    End If
    Set Clone = dup
End Function


Public Function AfterPoint() As ByteArray
    Dim pLen As Long
    Dim retVal() As Byte
    pLen = n.dblDotIndex
    
    If n.B.Length <= pLen Then _
        pLen = n.B.Length - 1
        
    If pLen <= 0 Then
        ReDim retVal(0)
        AfterPoint = retVal
        Exit Function
    End If
    
    Dim retVal As ByteArray
    Call ByteArray.reserve(pLen)
    
    Dim i As Long
    For i = 0 To pLen - 1
        retVal(i) = n.B(i)
    Next
    
    Set AfterPoint = retVal
End Function


Public Sub SetLocalValue(Value As Variant)
    Dim vt As VbVarType
    vt = VarType(Value)
    If vt = VBObject Then
        If Value Is Nothing Then Exit Sub
        If TypeOf Value Is BigNumber Then
            Call fromBigNumber(Value)
        End If
    ElseIf (vt And vbArray) = vbArray Then
        If (vt And vbByte) = vbByte Then
            n = fromByteArray(ByteArray(Value)).GetStruct
        Else
            n = fromByteArray(ByteArray(ArrayToByteArray(Value))).GetStruct
        End If
    ElseIf vt = vbBoolean Then
        If Value Then
            Call SetLocalValue(CLng(1))
        Else
            Call SetLocalValue(CLng(-1))
        End If
    ElseIf vt = vbString Then
        n = fromString(CStr(Value)).GetStruct
    Else
        n = fromString(CStr(Value)).GetStruct
    End If
End Sub

Public Sub fromBigNumber(ByVal bgNum As BigNumber)
    n = bgNum.GetStruct
    If n.B Is Nothing Then
        Set n.B = New ByteArray
    Else
        Set n.B = n.B.Clone
    End If
End Sub

Public Function toDouble() As Double
    
End Function

Public Function toScientific(NumberOfDigitsAfterDecimal As Long) As String
    
End Function
Public Function toScientificBA() As ByteArray
    
End Function
Public Function toString() As String
    Dim retVal As String
    If n.Sign = sNegative Then
        retVal = "-"
    ElseIf n.Sign = sPositive Then
        If show_pos_sign Then
            retVal = "+"
        End If
    End If
    If IsZero Then
        retVal = retVal & "0"
    Else
        Dim i As Long, numVal As String
        For i = 0 To n.B.Length - 1
            numVal = numVal & (n.B(i) + 48)
        Next
        retVal = retVal * numVal
    End If
    toString = retVal
End Function
Public Function toByteArray() As ByteArray
    Set toByteArray = ByteArray(toString)
End Function

Public Function fromString(strBigNumber As String) As BigNumber
    Set fromString = fromByteArray(ByteArray(strBigNumber))
End Function
Public Function fromByteArray(baBigNumber As ByteArray) As BigNumber
    Dim baNum As ByteArray
    Set baNum = baBigNumber
    
    If baNum.IsEmpty Then throw InvalidArgumentValueException("Empty byte array.")
    Dim retS As BIGNUM_STRUCT
    
    If Not internal_validate(baNum) Then throw InvalidArgumentValueException
    
    Dim btSign As Byte
    btSign = baNum.Last
    
    Set baNum = internal_expand_ifscientific(baNum)
    If btSign = NEGATIVE_SIGN Then
        retS.Sign = sNegative
        Set baNum = baNum.SubArray(0, baNum.Length - 1)
    ElseIf btSign = POSITIVE_SIGN Then
        retS.Sign = sPositive
        Set baNum = baNum.SubArray(0, baNum.Length - 1)
    Else
        If baNum.Length = 0 Then
            retS.Sign = sZero
        ElseIf baNum.Length = 1 Then
            If baNum(0) = "0" Then
                retS.Sign = sZero
            Else
                retS.Sign = sPositive
            End If
        Else
            retS.Sign = sPositive
        End If
    End If
    
    Call internal_clean
End Function

Public Function GetByteAt(Index As Long) As Byte
    
End Function
Public Sub SetByteAt(Index As Long, Value As Byte)
    
End Sub

Public Property Get DotIndex() As Long
    DotIndex = n.dblDotIndex
End Property
Public Property Let DotIndex(Value As Long)
    If Value < 0 Then throw NegativeArgumentException("Floating Point Index Can't Be Negative.")
    If Value > n.B.Length Then throw InvalidArgumentValueException("Floating Point Index Can't Be Greater Than Number Length.")
    n.dblDotIndex = Value
End Property

Public Property Get Sign() As NumberSign
    Sign = n.Sign
End Property
Public Property Let Sign(Value As NumberSign)
    n.Sign = Value
    If Value = nsZero Then
        Call n.B.setBuffer(0)
        n.dblDotIndex = 0
    Else
        If IsZero Then _
            Call SetLocalValue(1)
    End If
End Property

Public Property Get IsPositive() As Boolean
    IsPositive = (Sign = nsPositive)
End Property
Public Property Get IsNegative() As Boolean
    IsNegative = (Sign = nsNegative)
End Property
Public Property Get IsZero() As Boolean
    IsZero = ((n.Sign = nsZero) Or (n.B.Length = 0))
End Property
Public Property Let IsZero(Value As Boolean)
    Sign = IIf(Value, nsZero, nsPositive)
End Property

Public Property Get Length() As Long
    Dim ln As Long
    ln = n.B.Length
    If n.dblDotIndex > 0 Then ln = ln + 1
    If n.Sign = sNegative Then ln = ln + 1
    Length = ln
End Property
Public Function BytesLength(Optional IncludePlus As Boolean = False) As Long
    BytesLength = n.B.Length
    If n.dblDotIndex > 0 Then _
        BytesLength = BytesLength + 1
    
    If Not IsZero Then
        If IsPositive Then
            If IncludePlus Then _
                BytesLength = BytesLength + 1
        Else
            BytesLength = BytesLength + 1
        End If
    End If
End Function
Public Function CalculateLengthIn(RecordSize As Long, Optional IncludePlus As Boolean = False) As Long
    Dim btsLength As Long
    btsLength = BytesLength(IncludePlus)
    CalculateLengthIn = (btsLength \ RecordSize) + IIf((btsLength Mod RecordSize) > 0, 1, 0)
End Function


Public Function IntegeralValue() As ByteArray
    Dim pLen As Long
    Dim retVal() As Byte
    pLen = n.dblDotIndex
    
    If n.B.Length <= pLen Then _
        pLen = n.B.Length - 1
    
    If pLen <= 0 Then
        ReDim retVal(0)
        IntegeralValue = retVal
        Exit Function
    End If
    
    pLen = n.B.Length - pLen
    
    Dim retVal As ByteArray
    Call ByteArray.reserve(pLen)
    
    Dim i As Long
    For i = 0 To pLen - 1
        retVal(i) = n.B(pLen + i)
    Next
    
    Set IntegeralValue = retVal
End Function

Public Property Get E() As BigNumber
    
End Property
Public Property Let E(Value As BigNumber)
    
End Property
Public Property Set E(Value As BigNumber)
    
End Property

Private Function NewBigNumber(n As BIGNUM_STRUCT) As BigNumber
    
End Function

Public Function NoSign() As BigNumber
    Set NoSign = NewBigNumber(n)
    If Not NoSign.IsZero Then _
        NoSign.Sign = nsPositive
End Function
Public Function bnNot() As BigNumber 'internal
    Dim i As Long, B As ByteArray
    Set bnNot = Clone
    Set B = bnNot.GetByteArray
    If IsZero Then
        Exit Function
    ElseIf IsNegative Then
        'Call bnNot.internal_reserveBytesAtEnd(1)
        For i = 0 To B.Length - 1
            B(i) = 9 - B(i)
        Next
        B.Last = (&H7F And B.Last) '0xxx xxxx
        bnNot.Sign = nsPositive
    ElseIf IsPositive Then
        For i = 0 To B.Length - 1
            B(i) = 9 - B(i)
        Next
        B.Last = (&H8F Or B.Last) '1xxx xxxx
        bnNot.Sign = nsNegative
    End If
End Function
Public Function bnAnd(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnOr(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnXor(bgNum2 As BigNumber) As BigNumber
    
End Function

Public Function bnAdd(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnSub(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnMul(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnDiv(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnMod(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnPow(bgNum2 As BigNumber) As BigNumber
    
End Function
Public Function bnLog(bgBaseNum As BigNumber) As BigNumber
    
End Function


Public Function bnShiftLeft(TimesToShift As Long) As BigNumber
    
End Function
Public Function bnShiftRight(TimesToShift As Long) As BigNumber
    
End Function
Public Function bnRotateLeft(TimesToRotate As Long) As BigNumber
    
End Function
Public Function bnRotateRight(TimesToRotate As Long) As BigNumber
    
End Function


Private Function IClassClonable_Clone() As Object
    Set IClassClonable_Clone = Clone
End Function

Private Sub IClassTexer_fromByteArray(Value() As Byte)
    
End Sub
Private Property Get IClassTexer_texHeader(texType As mint_TexingType) As String

End Property
Private Sub IClassTexer_fromString(Value As String)
    
End Sub
Private Function IClassTexer_toByteArray() As Byte()
    
End Function
Private Function IClassTexer_toString() As String
    
End Function

Private Property Get IAliasable_Alias() As String
    IAliasable_Alias = CLASSALIASSTRING
End Property
