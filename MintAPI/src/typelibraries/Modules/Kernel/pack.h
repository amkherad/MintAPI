/* This header file machine-generated by mktyplib.exe */
/* Interface to type library: MintKBH */

#ifndef _MintKBH_H_
#define _MintKBH_H_

DEFINE_GUID(LIBID_MintKBH,0x00000000L,0x7700,0x1145,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);
#ifndef BEGIN_INTERFACE
#define BEGIN_INTERFACE
#endif

typedef void FAR* Any;

typedef void FAR* AnyArr;

typedef LPSTR String;

typedef LPWSTR WString;

typedef unsigned char Byte;

typedef long Long;

typedef unsigned long ULong;

typedef short Integer;

typedef int Boolean;

typedef CY Currency;

typedef CY Date;

typedef VARIANT Variant;

typedef enum API_SysKind {
    SYS_Win16 = 0,
    SYS_Win32,
    SYS_Mac,
    SYS_Win64
} API_SYSKIND;

typedef enum API_RegKind {
    RegKind_DEFAULT,
    RegKind_REGISTER,
    RegKind_NONE
} API_RegKind;

typedef enum API_CallConv {
    CC_FastCall = 0,
    CC_CDECL = 1,
    CC_MscPascal,
    CC_Pascal,
    CC_MacPascal,
    CC_StdCall,
    CC_FpFastCall,
    CC_SysCall,
    CC_MpwCDECL,
    CC_MpwPascal,
    CC_MAX
} API_CALLCONV;

typedef enum API_InvokeKind {
    IK_Function = 1,
    IK_PropertyGet = 2,
    IK_PropertyPut = 4,
    IK_PropertyPutRef = 8
} API_InvokeKind;

typedef enum API_TypeKind {
    TK_Enum = 0,
    TK_Record,
    TK_Module,
    TK_Interface,
    TK_Dispatch,
    TK_CoClass,
    TK_Alias,
    TK_Union,
    TK_Max
} API_TypeKind;

typedef enum API_DescKind {
    DK_None = 0,
    DK_FuncDesc,
    DK_VarDesc,
    DK_TypeComp,
    DK_ImplicitAppObj,
    DK_MAX
} API_DescKind;

typedef enum API_VarKind {
    VAR_PerInstance = 0,
    VAR_Static,
    VAR_Const,
    VAR_Dispatch
} API_VarKind;

typedef enum API_FuncKind {
    FUNC_Virtual = 0,
    FUNC_PureVirtual,
    FUNC_NonVirtual,
    FUNC_Static,
    FUNC_Dispatch
} API_FuncKind;

typedef enum API_StatFlag {
    STFlag_DEFAULT = 0,
    STFlag_NONAME = 1,
    STFlag_NOOPEN = 2
} API_StatFlag;

typedef struct API_RECT {
    long Left;
    long Top;
    long Right;
    long Bottom;
} API_RECT;

typedef struct API_IDLDESC {
    long dwReserved;
    Integer wIDLFlags;
} API_IDLDESC;

typedef struct API_TYPEDESC {
    long lpValue;
    Integer VT;
} API_TYPEDESC;

typedef struct API_EXCEPINFO {
    Integer wCode;
    Integer wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    Long dwHelpContext;
    Long pvReserved;
    Long pfnDeferredFillIn;
    Long scode;
} API_EXCEPINFO;

typedef struct API_DISPPARAMS {
    VARIANT rgvarg;
    long rgdispidNamedArgs;
    long cArgs;
    long cNamedArgs;
} API_DISPPARAMS;

typedef struct API_PARAMDESCEX {
    long cBytes;
    VARIANT varDefaultValue;
} API_PARAMDESCEX;

typedef struct API_PARAMDESC {
    struct API_PARAMDESCEX pParamDescex;
    Integer wParamFlags;
} API_PARAMDESC;

typedef struct API_ELEMDESC {
    struct API_TYPEDESC tDesc;
    struct API_IDLDESC IdlDesc;
    struct API_PARAMDESC ParamDesc;
} API_ELEMDESC;

typedef struct API_FUNCDESC {
    long MemID;
    long lPrgSCode;
    struct API_ELEMDESC lPrgElemDescParam;
    API_FuncKind funcKind;
    API_InvokeKind InvKind;
    API_CALLCONV CallConv;
    Integer cParams;
    Integer cParamsOpt;
    Integer oVft;
    Integer cScodes;
    struct API_ELEMDESC ElemdescFunc;
    Integer wFuncFlags;
} API_FUNCDESC;

typedef struct API_VARDESC {
    long MemID;
    long lpStrPtr_Schema;
    long oInst;
    VARIANT lpVarValue;
    struct API_ELEMDESC ElemDescVar;
    Integer wVarFlags;
    API_VarKind VarKind;
} API_VARDESC;

typedef struct API_CUSTDATAITEM {
    API_StdGuid Guid;
    VARIANT varValue;
} API_CUSTDATAITEM;

typedef struct API_CUSTDATA {
    long cCustData;
    struct API_CUSTDATAITEM prgCustData;
} API_CUSTDATA;

typedef struct API_TLIBATTR {
    API_StdGuid Guid;
    long LCID;
    API_SYSKIND SysKind;
    Integer wMajorVerNum;
    Integer wMinorVerNum;
    Integer wLibFlags;
} API_TLIBATTR;

typedef struct API_BINDPTR {
    struct API_FUNCDESC lpFuncDesc;
    struct API_VARDESC lpVarDesc;
    long lpITypeCompPtr;
} API_BINDPTR;

typedef struct API_TYPEATTR {
    API_StdGuid Guid;
    long LCID;
    long dwReserved;
    long MemIDConstructor;
    long MemIDDestructor;
    long lpStrPtr_Schema;
    long cbSizeInstance;
    API_TypeKind Typekind;
    long cFuncs;
    long cVars;
    long cImplTypes;
    long cbSizeVft;
    long cbAlignment;
    long wTypeFlags;
    long wMajorVerNum;
    long wMinorVerNum;
    struct API_TYPEDESC tDescAlias;
    struct API_IDLDESC IdlDescType;
} API_TYPEATTR;

typedef struct API_FILE_SEGMENT_ELEMENT {
    Int64 Buffer;
    UInt64 Alignment;
} API_FILE_SEGMENT_ELEMENT;

typedef struct API_OSVERSIONINFOA {
    long dwOSVersionInfoSize;
    long dwMajorVersion;
    long dwMinorVersion;
    long dwBuildNumber;
    long dwPlatformId;
    Byte szCSDVersion[128];
} API_OSVERSIONINFOA;

typedef struct API_OSVERSIONINFOEXA {
    long dwOSVersionInfoSize;
    long dwMajorVersion;
    long dwMinorVersion;
    long dwBuildNumber;
    long dwPlatformId;
    Byte szCSDVersion[128];
    short wServicePackMajor;
    short wServicePackMinor;
    short wSuiteMask;
    Byte wProductType;
    Byte wReserved;
} API_OSVERSIONINFOEXA;

typedef struct API_OSVERSIONINFOW {
    long dwOSVersionInfoSize;
    long dwMajorVersion;
    long dwMinorVersion;
    long dwBuildNumber;
    long dwPlatformId;
    char szCSDVersion[128];
} API_OSVERSIONINFOW;

typedef struct API_OSVERSIONINFOEXW {
    long dwOSVersionInfoSize;
    long dwMajorVersion;
    long dwMinorVersion;
    long dwBuildNumber;
    long dwPlatformId;
    char szCSDVersion[128];
    short wServicePackMajor;
    short wServicePackMinor;
    short wSuiteMask;
    Byte wProductType;
    Byte wReserved;
} API_OSVERSIONINFOEXW;

typedef struct API_LIST_ENTRY {
    long Flink;
    long Blink;
} API_LIST_ENTRY;

DEFINE_GUID(IID_ITypeLib,0x50000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ITypeLib */
#undef INTERFACE
#define INTERFACE ITypeLib

DECLARE_INTERFACE_(ITypeLib, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* ITypeLib methods */
    STDMETHOD_(long, GetTypeInfoCount)(THIS) PURE;
    STDMETHOD(GetTypeInfo)(THIS_ long Index, Any ppITypeInfo) PURE;
    STDMETHOD(GetTypeInfoType)(THIS_ long Index, API_TypeKind FAR* pTKind) PURE;
    STDMETHOD(GetTypeInfoOfGuid)(THIS_ Any guid, Any ppITypeInfo) PURE;
    STDMETHOD(GetLibAttr)(THIS_ Any API_TLIBATTR_ppTLibAttr) PURE;
    STDMETHOD(GetTypeComp)(THIS_ Any ppITypeComp) PURE;
    STDMETHOD(GetDocumentation)(THIS_ long Index, BSTR FAR* pBstrName, BSTR FAR* pBstrDocString, long FAR* pdwHelpContext, BSTR FAR* pBstrHelpFile) PURE;
    STDMETHOD(IsName)(THIS_ BSTR szNameBuf, long lHashVal, Boolean FAR* pfName) PURE;
    STDMETHOD(FindName)(THIS_ BSTR szNameBuf, long lHashVal, Any ppITypeInfo, long FAR* rgMemId, Integer FAR* pcFound) PURE;
    STDMETHOD_(void, ReleaseTLibAttr)(THIS_ Any API_TLIBATTR_pTLibAttr) PURE;
};

DEFINE_GUID(IID_ITypeComp,0x30000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ITypeComp */
#undef INTERFACE
#define INTERFACE ITypeComp

DECLARE_INTERFACE_(ITypeComp, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* ITypeComp methods */
    STDMETHOD(Bind)(THIS_ BSTR szName, long lHashVal, Integer wFlags, Any ppITypeInfo, Any API_DESCKIND_pDescKind, Any API_BINDPTR_pBindPtr) PURE;
    STDMETHOD(BindType)(THIS_ BSTR szName, long lHashVal, Any ppTInfo, ITypeComp FAR* FAR* ppTComp) PURE;
};

DEFINE_GUID(IID_ITypeInfo,0x10000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ITypeInfo */
#undef INTERFACE
#define INTERFACE ITypeInfo

DECLARE_INTERFACE_(ITypeInfo, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* ITypeInfo methods */
    STDMETHOD(GetTypeAttr)(THIS_ Any API_TYPEATTR_ppTypeAttr) PURE;
    STDMETHOD(GetTypeComp)(THIS_ ITypeComp FAR* FAR* ppTComp) PURE;
    STDMETHOD(GetFuncDesc)(THIS_ long Index, Any API_FUNCDESC_ppFuncDesc) PURE;
    STDMETHOD(GetVarDesc)(THIS_ long Index, Any API_VARDESC_ppVarDesc) PURE;
    STDMETHOD(GetNames)(THIS_ long memid, BSTR FAR* rgBstrNames, long cMaxNames, long FAR* pcNames) PURE;
    STDMETHOD(GetRefTypeOfImplType)(THIS_ long Index, long FAR* pRefType) PURE;
    STDMETHOD(GetImplTypeFlags)(THIS_ long Index, long FAR* pImplTypeFlags) PURE;
    STDMETHOD(GetIDsOfNames)(THIS_ BSTR FAR* rgszNames, long cNames, long FAR* pMemId) PURE;
    STDMETHOD(Invoke)(THIS_ Any pvInstance, long memid, Integer wFlags, Any API_DISPPARAMS_pDispParams, VARIANT FAR* pVarResult, Any FAR* API_EXCEPINFO_pExcepInfo, long FAR* puArgErr) PURE;
    STDMETHOD(GetDocumentation)(THIS_ long memid, BSTR FAR* pBstrName, BSTR FAR* pBstrDocString, long FAR* pdwHelpContext, BSTR FAR* pBstrHelpFile) PURE;
    STDMETHOD(GetDllEntry)(THIS_ long memid, API_InvokeKind invKind, BSTR FAR* pBstrDllName, BSTR FAR* pBstrName, Integer FAR* pwOrdinal) PURE;
    STDMETHOD(GetRefTypeInfo)(THIS_ long hRefType, ITypeInfo FAR* FAR* ppTInfo) PURE;
    STDMETHOD(AddressOfMember)(THIS_ long memid, API_InvokeKind invKind, Any ppv) PURE;
    STDMETHOD(CreateInstance)(THIS_ IUnknown * pUnkOuter, Any riid, Any ppvObj) PURE;
    STDMETHOD(GetMops)(THIS_ long memid, BSTR FAR* pBstrMops) PURE;
    STDMETHOD(GetContainingTypeLib)(THIS_ ITypeLib FAR* FAR* ppTLib, long FAR* pIndex) PURE;
    STDMETHOD(ReleaseTypeAttr)(THIS_ Any API_TYPEATTR_pTypeAttr) PURE;
    STDMETHOD(ReleaseFuncDesc)(THIS_ Any API_FUNCDESC_pFuncDesc) PURE;
    STDMETHOD(ReleaseVarDesc)(THIS_ Any API_VARDESC_pVarDesc) PURE;
};

DEFINE_GUID(IID_ITypeInfo2,0x10000001L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ITypeInfo2 */
#undef INTERFACE
#define INTERFACE ITypeInfo2

DECLARE_INTERFACE_(ITypeInfo2, ITypeInfo)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* ITypeInfo methods */
    STDMETHOD(GetTypeAttr)(THIS_ Any API_TYPEATTR_ppTypeAttr) PURE;
    STDMETHOD(GetTypeComp)(THIS_ ITypeComp FAR* FAR* ppTComp) PURE;
    STDMETHOD(GetFuncDesc)(THIS_ long Index, Any API_FUNCDESC_ppFuncDesc) PURE;
    STDMETHOD(GetVarDesc)(THIS_ long Index, Any API_VARDESC_ppVarDesc) PURE;
    STDMETHOD(GetNames)(THIS_ long memid, BSTR FAR* rgBstrNames, long cMaxNames, long FAR* pcNames) PURE;
    STDMETHOD(GetRefTypeOfImplType)(THIS_ long Index, long FAR* pRefType) PURE;
    STDMETHOD(GetImplTypeFlags)(THIS_ long Index, long FAR* pImplTypeFlags) PURE;
    STDMETHOD(GetIDsOfNames)(THIS_ BSTR FAR* rgszNames, long cNames, long FAR* pMemId) PURE;
    STDMETHOD(Invoke)(THIS_ Any pvInstance, long memid, Integer wFlags, Any API_DISPPARAMS_pDispParams, VARIANT FAR* pVarResult, Any FAR* API_EXCEPINFO_pExcepInfo, long FAR* puArgErr) PURE;
    STDMETHOD(GetDocumentation)(THIS_ long memid, BSTR FAR* pBstrName, BSTR FAR* pBstrDocString, long FAR* pdwHelpContext, BSTR FAR* pBstrHelpFile) PURE;
    STDMETHOD(GetDllEntry)(THIS_ long memid, API_InvokeKind invKind, BSTR FAR* pBstrDllName, BSTR FAR* pBstrName, Integer FAR* pwOrdinal) PURE;
    STDMETHOD(GetRefTypeInfo)(THIS_ long hRefType, ITypeInfo FAR* FAR* ppTInfo) PURE;
    STDMETHOD(AddressOfMember)(THIS_ long memid, API_InvokeKind invKind, Any ppv) PURE;
    STDMETHOD(CreateInstance)(THIS_ IUnknown * pUnkOuter, Any riid, Any ppvObj) PURE;
    STDMETHOD(GetMops)(THIS_ long memid, BSTR FAR* pBstrMops) PURE;
    STDMETHOD(GetContainingTypeLib)(THIS_ ITypeLib FAR* FAR* ppTLib, long FAR* pIndex) PURE;
    STDMETHOD(ReleaseTypeAttr)(THIS_ Any API_TYPEATTR_pTypeAttr) PURE;
    STDMETHOD(ReleaseFuncDesc)(THIS_ Any API_FUNCDESC_pFuncDesc) PURE;
    STDMETHOD(ReleaseVarDesc)(THIS_ Any API_VARDESC_pVarDesc) PURE;
#endif

    /* ITypeInfo2 methods */
    STDMETHOD(GetTypeKind)(THIS_ API_TypeKind FAR* pTypeKind) PURE;
    STDMETHOD(GetTypeFlags)(THIS_ long FAR* pTypeFlags) PURE;
    STDMETHOD(GetFuncIndexOfMemId)(THIS_ long memid, API_InvokeKind invKind, long FAR* pFuncIndex) PURE;
    STDMETHOD(GetVarIndexOfMemId)(THIS_ long memid, long FAR* pVarIndex) PURE;
    STDMETHOD(GetCustData)(THIS_ API_StdGuid FAR* Guid, VARIANT FAR* pVarVal) PURE;
    STDMETHOD(GetFuncCustData)(THIS_ long Index, API_StdGuid FAR* Guid, VARIANT FAR* pVarVal) PURE;
    STDMETHOD(GetParamCustData)(THIS_ long indexFunc, long indexParam, API_StdGuid FAR* Guid, VARIANT FAR* pVarVal) PURE;
    STDMETHOD(GetVarCustData)(THIS_ long Index, API_StdGuid FAR* Guid, VARIANT FAR* pVarVal) PURE;
    STDMETHOD(GetImplTypeCustData)(THIS_ long Index, API_StdGuid FAR* Guid, VARIANT FAR* pVarVal) PURE;
    STDMETHOD(GetDocumentation2)(THIS_ long memid, long LCID, BSTR FAR* pbstrHelpString, long FAR* pdwHelpStringContext, BSTR FAR* pbstrHelpStringDll) PURE;
    STDMETHOD(GetAllCustData)(THIS_ struct API_CUSTDATA FAR* pCustData) PURE;
    STDMETHOD(GetAllFuncCustData)(THIS_ long Index, struct API_CUSTDATA FAR* pCustData) PURE;
    STDMETHOD(GetAllParamCustData)(THIS_ long indexFunc, long indexParam, struct API_CUSTDATA FAR* pCustData) PURE;
    STDMETHOD(GetAllVarCustData)(THIS_ long Index, struct API_CUSTDATA FAR* pCustData) PURE;
    STDMETHOD(GetAllImplTypeCustData)(THIS_ long Index, struct API_CUSTDATA FAR* pCustData) PURE;
};

DEFINE_GUID(IID_ITypeLib2,0x50000001L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ITypeLib2 */
#undef INTERFACE
#define INTERFACE ITypeLib2

DECLARE_INTERFACE_(ITypeLib2, ITypeLib)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* ITypeLib methods */
    STDMETHOD_(long, GetTypeInfoCount)(THIS) PURE;
    STDMETHOD(GetTypeInfo)(THIS_ long Index, Any ppITypeInfo) PURE;
    STDMETHOD(GetTypeInfoType)(THIS_ long Index, API_TypeKind FAR* pTKind) PURE;
    STDMETHOD(GetTypeInfoOfGuid)(THIS_ Any guid, Any ppITypeInfo) PURE;
    STDMETHOD(GetLibAttr)(THIS_ Any API_TLIBATTR_ppTLibAttr) PURE;
    STDMETHOD(GetTypeComp)(THIS_ Any ppITypeComp) PURE;
    STDMETHOD(GetDocumentation)(THIS_ long Index, BSTR FAR* pBstrName, BSTR FAR* pBstrDocString, long FAR* pdwHelpContext, BSTR FAR* pBstrHelpFile) PURE;
    STDMETHOD(IsName)(THIS_ BSTR szNameBuf, long lHashVal, Boolean FAR* pfName) PURE;
    STDMETHOD(FindName)(THIS_ BSTR szNameBuf, long lHashVal, Any ppITypeInfo, long FAR* rgMemId, Integer FAR* pcFound) PURE;
    STDMETHOD_(void, ReleaseTLibAttr)(THIS_ Any API_TLIBATTR_pTLibAttr) PURE;
#endif

    /* ITypeLib2 methods */
    STDMETHOD(GetCustData)(THIS_ API_StdGuid FAR* Guid, VARIANT FAR* pVarVal) PURE;
    STDMETHOD(GetLibStatistics)(THIS_ long FAR* pcUniqueNames, long FAR* pcchUniqueNames) PURE;
    STDMETHOD(GetDocumentation2)(THIS_ long Index, long LCID, BSTR FAR* pbstrHelpString, long FAR* pdwHelpStringContext, BSTR FAR* pbstrHelpStringDll) PURE;
    STDMETHOD(GetAllCustData)(THIS_ struct API_CUSTDATA FAR* pCustData) PURE;
};

DEFINE_GUID(IID_ICreateTypeInfo,0x60000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ICreateTypeInfo */
#undef INTERFACE
#define INTERFACE ICreateTypeInfo

DECLARE_INTERFACE_(ICreateTypeInfo, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* ICreateTypeInfo methods */
    STDMETHOD(SetGuid)(THIS_ API_StdGuid FAR* guid) PURE;
    STDMETHOD(SetTypeFlags)(THIS_ long uTypeFlags) PURE;
    STDMETHOD(SetDocString)(THIS_ WString pStrDoc) PURE;
    STDMETHOD(SetHelpContext)(THIS_ long dwHelpContext) PURE;
    STDMETHOD(SetVersion)(THIS_ short wMajorVerNum, short wMinorVerNum) PURE;
    STDMETHOD(AddRefTypeInfo)(THIS_ ITypeInfo FAR* pTInfo, long FAR* phRefType) PURE;
    STDMETHOD(AddFuncDesc)(THIS_ long Index, struct API_FUNCDESC FAR* pFuncDesc) PURE;
    STDMETHOD(AddImplType)(THIS_ long Index, long hRefType) PURE;
    STDMETHOD(SetImplTypeFlags)(THIS_ long Index, long implTypeFlags) PURE;
    STDMETHOD(SetAlignment)(THIS_ short cbAlignment) PURE;
    STDMETHOD(SetSchema)(THIS_ WString pStrSchema) PURE;
    STDMETHOD(AddVarDesc)(THIS_ long Index, struct API_VARDESC FAR* pVarDesc) PURE;
    STDMETHOD(SetFuncAndParamNames)(THIS_ long Index, WString FAR* rgszNames, long cNames) PURE;
    STDMETHOD(SetVarName)(THIS_ long Index, WString szName) PURE;
    STDMETHOD(SetTypeDescAlias)(THIS_ struct API_TYPEDESC FAR* pTDescAlias) PURE;
    STDMETHOD(DefineFuncAsDllEntry)(THIS_ long Index, WString szDllName, WString szProcName) PURE;
    STDMETHOD(SetFuncDocString)(THIS_ long Index, WString szDocString) PURE;
    STDMETHOD(SetVarDocString)(THIS_ long Index, WString szDocString) PURE;
    STDMETHOD(SetFuncHelpContext)(THIS_ long Index, long dwHelpContext) PURE;
    STDMETHOD(SetVarHelpContext)(THIS_ long Index, long dwHelpContext) PURE;
    STDMETHOD(SetMops)(THIS_ long Index, BSTR bstrMops) PURE;
    STDMETHOD(SetTypeIdldesc)(THIS_ struct API_IDLDESC FAR* pIdlDesc) PURE;
    STDMETHOD(LayOut)(THIS) PURE;
};

DEFINE_GUID(IID_ICreateTypeLib,0x70000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: ICreateTypeLib */
#undef INTERFACE
#define INTERFACE ICreateTypeLib

DECLARE_INTERFACE_(ICreateTypeLib, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* ICreateTypeLib methods */
    STDMETHOD(CreateTypeInfo)(THIS_ WString szName, API_TypeKind tkind, ICreateTypeInfo FAR* FAR* ppCTInfo) PURE;
    STDMETHOD(SetName)(THIS_ WString szName) PURE;
    STDMETHOD(SetVersion)(THIS_ short wMajorVerNum, short wMinorVerNum) PURE;
    STDMETHOD(SetGuid)(THIS_ API_StdGuid FAR* guid) PURE;
    STDMETHOD(SetDocString)(THIS_ WString szDoc) PURE;
    STDMETHOD(SetHelpFileName)(THIS_ WString szHelpFileName) PURE;
    STDMETHOD(SetHelpContext)(THIS_ DWORD dwHelpContext) PURE;
    STDMETHOD(SetLcid)(THIS_ long LCID) PURE;
    STDMETHOD(SetLibFlags)(THIS_ long uLibFlags) PURE;
    STDMETHOD(SaveAllChanges)(THIS) PURE;
};

DEFINE_GUID(IID_IVBUnknown,0x00000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IVBUnknown */
#undef INTERFACE
#define INTERFACE IVBUnknown

DECLARE_INTERFACE(IVBUnknown)
{
BEGIN_INTERFACE

    /* IVBUnknown methods */
    STDMETHOD_(long, QueryInterface)(THIS_ Any riid, long FAR* ppvObj) PURE;
    STDMETHOD_(long, AddRef)(THIS) PURE;
    STDMETHOD_(long, Release)(THIS) PURE;
};

DEFINE_GUID(IID_IVBDispatch,0x01000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IVBDispatch */
#undef INTERFACE
#define INTERFACE IVBDispatch

DECLARE_INTERFACE_(IVBDispatch, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IVBDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ long FAR* pctinfo) PURE;
    STDMETHOD(GetTypeInfo)(THIS_ long iTInfo, long LCID, ITypeInfo FAR* FAR* ppTInfo) PURE;
    STDMETHOD(GetIDsOfNames)(THIS_ Any riid, String rgszNames, long cNames, long LCID, long FAR* rgDispId) PURE;
    STDMETHOD(Invoke)(THIS_ long dispIdMember, Any riid, long LCID, long wFlags, Any FAR* API_DISPPARAMS_pDispParams, VARIANT FAR* pVarResult, Any FAR* API_EXCEPINFO_pExcepInfo, long FAR* puArgErr) PURE;
};

DEFINE_GUID(IID_IRecordInfo,0x02000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IRecordInfo */
#undef INTERFACE
#define INTERFACE IRecordInfo

DECLARE_INTERFACE_(IRecordInfo, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IRecordInfo methods */
    STDMETHOD(RecordInit)(THIS_ long pvNew) PURE;
    STDMETHOD(RecordClear)(THIS_ long pvExisting) PURE;
    STDMETHOD(RecordCopy)(THIS_ long pvExisting, long pvNew) PURE;
    STDMETHOD(GetGuid)(THIS_ API_StdGuid FAR* FAR* RetVal) PURE;
    STDMETHOD(GetName)(THIS_ BSTR FAR* RetVal) PURE;
    STDMETHOD(GetSize)(THIS_ long FAR* RetVal) PURE;
    STDMETHOD(GetTypeInfo)(THIS_ long FAR* RetVal) PURE;
    STDMETHOD(GetField)(THIS_ long pvData, LPWSTR szFieldName, VARIANT FAR* RetVal) PURE;
    STDMETHOD(GetFieldNoCopy)(THIS_ long pvData, LPWSTR szFieldName, VARIANT FAR* pvarField, long FAR* ppvDataCArray) PURE;
    STDMETHOD(PutField)(THIS_ long wFlags, long pvData, LPWSTR szFieldName, VARIANT FAR* pvarField) PURE;
    STDMETHOD(PutFieldNoCopy)(THIS_ long wFlags, long pvData, LPWSTR szFieldName, VARIANT FAR* pvarField) PURE;
    STDMETHOD(GetFieldNames)(THIS_ long FAR* pcNames, BSTR FAR* rgBstrNames) PURE;
    STDMETHOD_(MBOOL, IsMatchingType)(THIS_ IRecordInfo FAR* pRecordInfo) PURE;
    STDMETHOD_(long, RecordCreate)(THIS) PURE;
    STDMETHOD(RecordCreateCopy)(THIS_ long FAR* pvSource, long FAR* RetVal) PURE;
    STDMETHOD(RecordDestroy)(THIS_ long pvRecord) PURE;
};

DEFINE_GUID(IID_IProvideEnumerableVersion,0x0F000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IProvideEnumerableVersion */
#undef INTERFACE
#define INTERFACE IProvideEnumerableVersion

DECLARE_INTERFACE_(IProvideEnumerableVersion, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IProvideEnumerableVersion methods */
    STDMETHOD(GetEnumerableVersion)(THIS_ long FAR* retVal) PURE;
};

/* Functions defined in module: KernelHelper */

typedef struct API_SYSTEM_INFO {
    Long dwOemID;
    Long dwPageSize;
    Long lpMinimumApplicationAddress;
    Long lpMaximumApplicationAddress;
    Long dwActiveProcessorMask;
    Long dwNumberOfProcessors;
    Long dwProcessorType;
    Long dwAllocationGranularity;
    Long dwReserved;
} API_SYSTEM_INFO;

typedef struct API_SYSTEMTIME {
    Integer wYear;
    Integer wMonth;
    Integer wDayOfWeek;
    Integer wDay;
    Integer wHour;
    Integer wMinute;
    Integer wSecond;
    Integer wMilliseconds;
} API_SYSTEMTIME;

/* Functions defined in module: KernelAPI */
    extern long API_GetLastError(void);
    extern void API_SetLastError(long dwErrCode);
    extern void API_CopyMemory(Any Destination, Any Source, long Length);
    extern void memcpy(Any Destination, Any Source, long Length);
    extern void API_ZeroMemory(Any Destination, long Length);
    extern void memzero(Any Destination, long Length);
    extern void API_MoveMemory(Any Destination, Any Source, long Length);
    extern void memmove(Any Destination, Any Source, long Length);
    extern long API_IsBadCodePtr(Any lpfn);
    extern long API_IsBadStringPtr(String lpsz, long ucchMax);
    extern long API_IsBadStringPtrUnicode(WString lpsz, long ucchMax);
    extern long API_IsBadHugeReadPtr(Any lp, long ucb);
    extern long API_IsBadHugeWritePtr(Any lp, long ucb);
    extern long API_IsBadReadPtr(Any lp, long ucb);
    extern long API_IsBadWritePtr(Any lp, long ucb);
    extern long API_VirtualProtect(Any lpAddress, long dwSize, long flNewProtect, long FAR* lpflOldProtect);
    extern long API_VirtualProtectEx(long hProcess, Any lpAddress, long dwSize, long flNewProtect, long FAR* lpflOldProtect);
    extern long API_VirtualAlloc(long lpAddress, long dwSize, long flAllocationType, long flProtect);
    extern long API_VirtualAllocEx(long hProcess, long lpAddress, long dwSize, long flAllocationType, long flProtect);
    extern long API_VirtualFree(long lpAddress, long dwSize, long dwFreeType);
    extern long API_VirtualFreeEx(long hProcess, long lpAddress, long dwSize, long dwFreeType);
    extern long API_VirtualLock(long lpAddress, long dwSize);
    extern long API_VirtualUnlock(long lpAddress, long dwSize);
    extern long API_VirtualQuery(long lpAddress, Any lpBuffer, long dwLength);
    extern long API_VirtualQueryEx(long hProcess, long lpAddress, Any lpBuffer, long dwLength);
    extern long API_LoadLibrary(String lpLibFileName);
    extern long API_LoadLibraryUnicode(WString lpLibFileName);
    extern long API_LoadLibraryEx(String lpLibFileName, long hFile, long dwFlags);
    extern long API_LoadLibraryExUnicode(WString lpLibFileName, long hFile, long dwFlags);
    extern long API_GetProcAddress(long hModule, String lpProcName);
    extern long API_FreeLibrary(long hLibModule);
    extern long API_FreeLibraryAndExitThread(long hLibModule, long dwExitCode);
    extern void API_RaiseException(long dwExceptionCode, long dwExceptionFlags, long nNumberOfArguments, Any lpArguments);
    extern long API_SetErrorMode(long uMode);
    extern long API_CloseHandle(long hObject);
    extern long API_DuplicateHandle(long hSourceProcessHandle, long hSourceHandle, long hTargetProcessHandle, long FAR* lpTargetHandle, long dwDesiredAccess, Boolean bInheritHandle, long dwOptions);
    extern long API_SetHandleCount(long wNumber);
    extern long API_SetHandleInformation(long hObject, long dwMask, long dwFlags);
    extern long API_Beep(long dwFreq, long dwDuration);
    extern long API_GetTickCount(void);
    extern long API_GetVersionEx(Any lpVersionInfo);
    extern long API_GetVersionExUnicode(Any lpVersionInfo);
    extern long API_GetSystemInfo(struct API_SYSTEM_INFO FAR* lpSystemInfo);
    extern long API_GetHandleInformation(long hObject, long FAR* lpdwFlags);
    extern long API_GetUserDefaultLCID(void);
    extern void API_GetSystemTime(struct API_SYSTEMTIME FAR* lpSystemTime);
    extern long API_GetSystemTimeAdjustment(long lpTimeAdjustment, long lpTimeIncrement, long lpTimeAdjustmentDisabled);
    extern long API_IsWow64Process(long hProcess, long FAR* Wow64Process);

/* Functions defined in module: MSVBVM60 */

typedef enum API_REGCLS {
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,
    REGCLS_MULTI_SEPARATE = 2,
    REGCLS_SUSPENDED = 4,
    REGCLS_SURROGATE = 8
} API_REGCLS;

typedef enum API_CLSCTX {
    CLSCTX_INPROC_SERVER = 1,
    CLSCTX_INPROC_HANDLER = 2,
    CLSCTX_LOCAL_SERVER = 4,
    CLSCTX_INPROC_SERVER16 = 8,
    CLSCTX_REMOTE_SERVER = 16,
    CLSCTX_INPROC_HANDLER16 = 32,
    CLSCTX_RESERVED1 = 64,
    CLSCTX_RESERVED2 = 128,
    CLSCTX_RESERVED3 = 256,
    CLSCTX_RESERVED4 = 512,
    CLSCTX_NO_CODE_DOWNLOAD = 1024,
    CLSCTX_RESERVED5 = 2048,
    CLSCTX_NO_CUSTOM_MARSHAL = 4096,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
    CLSCTX_NO_FAILURE_LOG = 16384,
    CLSCTX_DISABLE_AAA = 32768,
    CLSCTX_ENABLE_AAA = 65536,
    CLSCTX_FROM_DEFAULT_CONTEXT = 131072,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 262144,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 524288,
    CLSCTX_ALL = 7,
    CLSCTX_SERVER = 5
} API_CLSCTX;

typedef enum API_COINIT {
    COINIT_APARTMENTTHREADED = 2,
    COINIT_MULTITHREADED = 0,
    COINIT_DISABLE_OLE1DDE = 4,
    COINIT_SPEED_OVER_MEMORY = 8
} API_COINIT;

typedef struct API_COAUTHIDENTITY {
    Integer FAR* User;
    Long UserLength;
    Integer FAR* Domain;
    Long DomainLength;
    Integer FAR* Password;
    Long PasswordLength;
    Long Flags;
} API_COAUTHIDENTITY;

typedef struct API_COAUTHINFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    String pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    struct API_COAUTHIDENTITY FAR* pAuthIdentityData;
    DWORD dwCapabilities;
} API_COAUTHINFO;

typedef struct API_COSERVERINFO {
    DWORD dwReserved1;
    String pwszName;
    struct API_COAUTHINFO FAR* pAuthInfo;
    DWORD dwReserved2;
} API_COSERVERINFO;

typedef struct API_MULTI_QI {
    API_StdGuid FAR* pIID;
    IUnknown * pItf;
    HRESULT HR;
} API_MULTI_QI;

/* Functions defined in module: Ole32 */
    extern long API_CoTaskMemAlloc(long cb);
    extern void API_CoTaskMemFree(long pv);
    extern HRESULT API_CoGetMalloc(long dwMemContext, IMalloc FAR* FAR* ppMalloc);
    extern long API_OleInitialize(Any pvReserved);
    extern long API_GetErrorInfo(long dwReserved, Any ppErrInfo);
    extern long API_GetClassFile(long szFilename, long FAR* pClsID);
    extern HRESULT API_CoCreateGuid(API_StdGuid FAR* RetVal);
    extern HRESULT API_GUIDFromString(LPWSTR lpsz, API_StdGuid FAR* RetVal);
    extern long API_IsEqualGUID(void FAR* rguid1, void FAR* rguid2);
    extern long API_StringFromGUID2(API_StdGuid FAR* rguid, LPWSTR lpsz, long cbMax);
    extern long API_ProgIDFromCLSID(API_StdGuid FAR* CLSID, long FAR* lplpszProgID);
    extern HRESULT API_CLSIDFromProgID(LPWSTR ProgID, API_StdGuid FAR* RetVal);
    extern HRESULT API_CLSIDFromString(LPWSTR lpSz, API_StdGuid FAR* RetVal);
    extern long API_CoGetCurrentProcess(void);
    extern long API_CoLoadLibrary(String lpszLibName, long bAutoFree);
    extern void API_CoFreeLibrary(long hInst);
    extern void API_CoFreeAllLibraries(void);
    extern void API_CoFreeUnusedLibraries(void);
    extern long API_CreateStreamOnHGlobal(long hGlobal, Boolean fDeleteOnRelease, IStream FAR* FAR* Stream);
    extern void API_CoCreateInstance(Any rClsid, IUnknown * pUnkOuter, long dwClsContext, Any riid, Any FAR* ppv);
    extern void API_CoCreateInstanceEx(Any rClsid, IUnknown * pUnkOuter, long dwClsCtx, struct API_COSERVERINFO pServerInfo, long dwCount, struct API_MULTI_QI FAR* pResults);

typedef struct SafeArrayBound {
    long cElements;
    long lLbound;
} SafeArrayBound;

typedef struct SafeArray1d {
    short cDims;
    short fFeatures;
    long cbElements;
    long cLocks;
    long pvData;
    long cElements;
    long lLbound;
} SafeArray1d;

typedef struct SafeArray {
    short cDims;
    short fFeatures;
    long cbElements;
    long cLocks;
    long pvData;
} SafeArray;

/* Functions defined in module: OleAuto32 */
    extern HRESULT API_LoadTypeLib(String TLpszModule, ITypeLib FAR* FAR* TPpTypeLib);
    extern HRESULT API_LoadTypeLibEx(String szFile, API_RegKind regkind, ITypeLib FAR* FAR* TPpTypeLib);
    extern HRESULT API_LoadRegTypeLib(API_StdGuid FAR* rGuid, short wVerMajor, short wVerMinor, long LCID, ITypeLib FAR* FAR* TPpTypeLib);
    extern HRESULT API_CreateTypeLib(API_SYSKIND SysKind, String szFile, ICreateTypeLib FAR* FAR* TPpTypeLib);
    extern HRESULT API_CreateTypeLibUnicode(API_SYSKIND SysKind, WString szFile, ICreateTypeLib FAR* FAR* TPpTypeLib);
    extern HRESULT API_QueryPathOfRegTypeLib(API_StdGuid FAR* Guid, short wMaj, short wMin, long LCID, BSTR FAR* lpbstrPathName);
    extern HRESULT API_RegisterTypeLib(ITypeLib FAR* ptlib, WString szFullPath, WString szHelpDir);
    extern HRESULT API_UnRegisterTypeLib(API_StdGuid FAR* libID, short wVerMajor, short wVerMinor, long LCID, API_SYSKIND syskind);
    extern HRESULT API_RegisterTypeLibForUser(ITypeLib FAR* ptlib, WString szFullPath, WString szHelpDir);
    extern HRESULT API_UnRegisterTypeLibForUser(API_StdGuid FAR* libID, short wVerMajor, short wVerMinor, long LCID, API_SYSKIND syskind);
    extern HRESULT API_DispGetIDsOfNames(ITypeInfo FAR* ptinfo, WString FAR* rgszNames, long cNames, MDISPID FAR* rgdispid);
    extern HRESULT API_DispGetParam(struct API_DISPPARAMS FAR* pdispparams, long position, vbVARTYPE vtTarg, VARIANT FAR* pvarResult, long FAR* puArgErr);
    extern HRESULT API_DispInvoke(Any pThis, ITypeInfo FAR* ptinfo, MDISPID dispidMember, long wFlags, struct API_DISPPARAMS FAR* pparams, VARIANT FAR* pvarResult, struct API_EXCEPINFO pexcepinfo, long FAR* puArgErr);
    extern HRESULT API_OleLoadPicture(IStream FAR* pStream, long lSize, MBOOL fRunmode, API_StdGuid FAR* riid, void FAR* ppvObj);
    extern long API_OleCreatePictureIndirect(void FAR* lpPictDesc, API_StdGuid FAR* riid, long fOwn, void FAR* lplpvObj);
    extern HRESULT API_SafeArrayCopyData(long psaSource, long psaTarget);
    extern long API_SafeArrayCreate(vbVarType vt, long cDims, struct SafeArrayBound FAR* rgsaBounds);
    extern long API_SafeArrayCreateN(vbVarType vt, long cDims, Any rgsaBounds);
    extern long API_SafeArrayCreateVector(vbVarType vt, long lLbound, long cElements);
    extern long API_SafeArrayCreateVectorEx(vbVarType vt, long lLbound, long cElements, long pvExtra);
    extern HRESULT API_SafeArrayDestroyData(long psa);
    extern long API_SafeArrayGetDim(long psa);
    extern long API_SafeArrayGetElemsize(long psa);
    extern HRESULT API_SafeArrayGetLBound(long psa, long nDim, long FAR* plLbound);
    extern HRESULT API_SafeArrayGetRecordInfo(long psa, IRecordInfo FAR* FAR* RetVal);
    extern HRESULT API_SafeArrayGetUBound(long psa, long nDim, long FAR* RetVal);
    extern HRESULT API_SafeArrayGetVartype(long psa, vbVarType FAR* RetVal);
    extern HRESULT API_SafeArrayLock(long psa);
    extern HRESULT API_SafeArrayUnlock(long psa);
    extern BSTR API_SysAllocString(String sz);
    extern BSTR API_SysAllocStringPtr(long sz);
    extern BSTR API_SysAllocStringLen(long psz, long cch);
    extern HRESULT API_SysFreeString(long sz);
    extern int API_SysReAllocString(long sz, Byte FAR* pOlechar);
    extern int API_SysReAllocStringLen(long sz, Byte FAR* pOlechar, long uint);
    extern int API_SysStringByteLen(long sz);
    extern int API_SysStringLen(long sz);
    extern HRESULT API_VariantCopy(VARIANT FAR* pvarDest, VARIANT FAR* pvarSrc);
    extern HRESULT API_VariantCopyInd(VARIANT FAR* pvarDest, VARIANT FAR* pvarSrc);
    extern HRESULT API_VariantClear(VARIANT FAR* pvarg);

/* Functions defined in module: OleAutoVar32 */
    extern long API_VarCmp(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, long lcid, long dwFlags);
    extern HRESULT API_VarImp(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarCat(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarMod(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarMul(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarPow(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarDiv(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarIdiv(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);
    extern HRESULT API_VarInt(VARIANT FAR* pvarIn, VARIANT FAR* pvarResult);
    extern HRESULT API_VarNot(VARIANT FAR* pvarIn, VARIANT FAR* pvarResult);
    extern HRESULT API_VarFix(VARIANT FAR* pvarIn, VARIANT FAR* pvarResult);
    extern HRESULT API_VarRound(VARIANT FAR* pvarIn, long cDecimals, VARIANT FAR* pvarResult);
    extern HRESULT API_VarEqv(VARIANT FAR* pvarLeft, VARIANT FAR* pvarRight, VARIANT FAR* pvarResult);

/* Functions defined in module: OleAutoDecimal32 */
    extern HRESULT API_VarDecAbs(Any pdecIn, VARIANT FAR* pvarRight, Any pdecResult);
    extern HRESULT API_VarDecAdd(Any pdecLeft, Any pdecRight, Any pdecResult);
    extern HRESULT API_VarDecCmp(Any pdecLeft, Any pdecRight, Any pdecResult);
    extern HRESULT API_VarDecCmpR8(Any pdecLeft, double dblRight);
    extern HRESULT API_VarDecDiv(Any pdecLeft, Any pdecRight, Any pdecResult);

typedef struct os_iobuf {
    String ib_ptr;
    Long ib_cnt;
    String ib_base;
    Long ib_flag;
    Long ib_file;
    Long ib_charbuf;
    Long ib_bufsiz;
    String ib_tmpfname;
} os_iobuf;

typedef struct API_FILETIME {
    Long dwLowDateTime;
    Long dwHighDateTime;
} API_FILETIME;

typedef enum API_DOSDEVICE_FLAGS {
    DDD_RAW_TARGET_PATH = 1,
    DDD_REMOVE_DEFINITION = 2,
    DDD_EXACT_MATCH_ON_REMOVE = 4,
    DDD_NO_BROADCAST_SYSTEM = 8
} API_DOSDEVICE_FLAGS;

/* Functions defined in module: KernelIO */
    extern long API_AreFileApisANSI(void);
    extern long API_ReadFileOVR(long hFile, Any lpBuffer, long nNumberOfBytesToRead, long FAR* lpNumberOfBytesRead, API_OVERLAPPED lpOverlapped);
    extern long API_ReadFile(long hFile, Any lpBuffer, long nNumberOfBytesToRead, long FAR* lpNumberOfBytesRead, Any lpOverlapped);
    extern long API_ReadFileExOVR(long hFile, Any lpBuffer, long nNumberOfBytesToRead, long FAR* lpNumberOfBytesRead, API_OVERLAPPED lpOverlapped, long lpCompletionRoutine);
    extern long API_ReadFileEx(long hFile, Any lpBuffer, long nNumberOfBytesToRead, long FAR* lpNumberOfBytesRead, Any lpOverlapped, long lpCompletionRoutine);
    extern long API_WriteFileOVR(long hFile, Any lpBuffer, long nNumberOfBytesToWrite, long FAR* lpNumberOfBytesWritten, API_OVERLAPPED lpOverlapped);
    extern long API_WriteFile(long hFile, Any lpBuffer, long nNumberOfBytesToWrite, long FAR* lpNumberOfBytesWritten, Any lpOverlapped);
    extern long API_WriteFileExOVR(long hFile, Any lpBuffer, long nNumberOfBytesToWrite, long FAR* lpNumberOfBytesWritten, API_OVERLAPPED lpOverlapped, long FAR* lpCompletionRoutine);
    extern long API_WriteFileEx(long hFile, Any lpBuffer, long nNumberOfBytesToWrite, long FAR* lpNumberOfBytesWritten, Any lpOverlapped, long FAR* lpCompletionRoutine);
    extern long API_FlushFileBuffers(long hFile);
    extern long API_ReadFileScatter(long hFile, struct API_FILE_SEGMENT_ELEMENT FAR* aSegmentArray, long nNumberOfBytesToRead, long FAR* lpReserved, API_OVERLAPPED lpOverlapped, long lpCompletionRoutine);
    extern long API_WriteFileGather(long hFile, struct API_FILE_SEGMENT_ELEMENT FAR* aSegmentArray, long nNumberOfBytesToWrite, long FAR* lpReserved, API_OVERLAPPED lpOverlapped, long lpCompletionRoutine);
    extern long API_GetStdHandle(long nStdHandle);
    extern long API_SetStdHandle(long nStdHandle, long nHandle);
    extern long API_FileTimeToSystemTime(struct API_FILETIME FAR* lpFileTime, struct API_SYSTEMTIME FAR* lpSystemTime);
    extern long API_FileTimeToLocalFileTime(struct API_FILETIME FAR* lpFileTime, struct API_FILETIME FAR* lpLocalFileTime);
    extern long API_FileTimeToDosDateTime(struct API_FILETIME FAR* lpFileTime, Integer FAR* lpFatDate, Integer FAR* lpFatTime);

/* Functions defined in module: KernelDiskDrive */
    extern long API_GetLogicalDriveStrings(long nBufferLength, String lpBuffer);
    extern long API_GetLogicalDriveStringsUnicode(long nBufferLength, WString lpBuffer);
    extern long API_GetVolumeInformation(String lpRootPathName, String lpVolumeNameBuffer, long nVolumeNameSize, long FAR* lpVolumeSerialNumber, long FAR* lpMaximumComponentLength, long FAR* lpFileSystemFlags, String lpFileSystemNameBuffer, long nFileSystemNameSize);
    extern long API_GetVolumeInformationUnicode(WString lpRootPathName, WString lpVolumeNameBuffer, long nVolumeNameSize, long FAR* lpVolumeSerialNumber, long FAR* lpMaximumComponentLength, long FAR* lpFileSystemFlags, WString lpFileSystemNameBuffer, long nFileSystemNameSize);
    extern long API_SetVolumeLabel(String lpRootPathName, String lpVolumeName);
    extern long API_SetVolumeLabelUnicode(String lpRootPathName, String lpVolumeName);
    extern long API_DefineDosDevice(API_DOSDEVICE_FLAGS dwFlags, String lpDeviceName, String lpTargetPath);
    extern long API_DefineDosDeviceUnicode(API_DOSDEVICE_FLAGS dwFlags, WString lpDeviceName, WString lpTargetPath);
    extern long API_SetVolumeMountPoint(LPSTR lpszVolumeMountPoint, LPSTR lpszVolumeName);
    extern long API_GetDriveType(String nDrive);
    extern long API_GetDriveTypeUnicode(WString nDrive);

typedef enum API_ThreadInformationClass {
    ticThreadBasicInformation = 0,
    ticThreadTimes = 1,
    ticThreadPriority = 2,
    ticThreadBasePriority = 3,
    ticThreadAffinityMask = 4,
    ticThreadImpersonationToken = 5,
    ticThreadDescriptorTableEntry = 6,
    ticThreadEnableAlignmentFaultFixup = 7,
    ticThreadEventPair = 8,
    ticThreadQuerySetWin32StartAddress = 9,
    ticThreadZeroTlsCell = 10,
    ticThreadPerformanceCount = 11,
    ticThreadAmILastThread = 12,
    ticThreadIdealProcessor = 13,
    ticThreadPriorityBoost = 14,
    ticThreadSetTlsArrayAddress = 15,
    ticThreadIsIoPending = 16,
    ticThreadHideFromDebugger = 17
} API_ThreadInformationClass;

typedef enum API_ThreadInformationClass_SizeOfClasses {
    ticsoc_ThreadBasicInformation = 28,
    ticsoc_ThreadTimes = 32,
    ticsoc_ThreadPriority = 4,
    ticsoc_ThreadBasePriority = 4,
    ticsoc_ThreadAffinityMask = 4,
    ticsoc_ThreadImpersonationToken = 4,
    ticsoc_ThreadDescriptorTableEntry = 12,
    ticsoc_ThreadEnableAlignmentFaultFixup = 1,
    ticsoc_ThreadEventPair = 4,
    ticsoc_ThreadQuerySetWin32StartAddress = 4,
    ticsoc_ThreadZeroTlsCell = 4,
    ticsoc_ThreadPerformanceCount = 8,
    ticsoc_ThreadAmILastThread = 4,
    ticsoc_ThreadIdealProcessor = 4,
    ticsoc_ThreadPriorityBoost = 4,
    ticsoc_ThreadSetTlsArrayAddress = 4,
    ticsoc_ThreadIsIoPending = 0,
    ticsoc_ThreadHideFromDebugger = 0
} API_ThreadInformationClass_SizeOfClasses;

typedef struct API_CLIENT_ID {
    long UniqueProcess;
    long UniqueThread;
} API_CLIENT_ID;

typedef struct API_THREAD_BASIC_INFORMATION {
    long ExitStatus;
    long TebBaseAddress;
    struct API_CLIENT_ID ClientId;
    long AffinityMask;
    long Priority;
    long BasePriority;
    long Reserved;
} API_THREAD_BASIC_INFORMATION;

typedef struct API_THREAD_TIMES_INFORMATION {
    Int64 CreationTime;
    Int64 ExitTime;
    Int64 KernelTime;
    Int64 UserTime;
} API_THREAD_TIMES_INFORMATION;

/* Functions defined in module: KernelNt */
    extern long API_NtQueryInformationThread(long ThreadHandle, API_ThreadInformationClass ThreadInformationClass, Any ThreadInformation, long ThreadInformationLength, long FAR* ReturnLength);

typedef struct API_SMALL_RECT {
    Integer Left;
    Integer Top;
    Integer Right;
    Integer Bottom;
} API_SMALL_RECT;

typedef struct API_COORD {
    Integer X;
    Integer Y;
} API_COORD;

typedef struct API_CONSOLE_SCREEN_BUFFER_INFO {
    struct API_COORD dwSize;
    struct API_COORD dwCursorPosition;
    Integer wAttributes;
    struct API_SMALL_RECT srWindow;
    struct API_COORD dwMaximumWindowSize;
} API_CONSOLE_SCREEN_BUFFER_INFO;

typedef struct API_KEY_EVENT_RECORD {
    Long bKeyDown;
    Integer wRepeatCount;
    Integer wVirtualKeyCode;
    Integer wVirtualScanCode;
    Byte uChar;
    Long dwControlKeyState;
} API_KEY_EVENT_RECORD;

typedef struct API_MOUSE_EVENT_RECORD {
    struct API_COORD dwMousePosition;
    Long dwButtonState;
    Long dwControlKeyState;
    Long dwEventFlags;
} API_MOUSE_EVENT_RECORD;

typedef struct API_WINDOW_BUFFER_SIZE_RECORD {
    struct API_COORD dwSize;
} API_WINDOW_BUFFER_SIZE_RECORD;

typedef struct API_MENU_EVENT_RECORD {
    Long dwCommandId;
} API_MENU_EVENT_RECORD;

typedef struct API_FOCUS_EVENT_RECORD {
    Long bSetFocus;
} API_FOCUS_EVENT_RECORD;

typedef struct API_CONSOLE_INPUT_RECORD_EVENT {
    struct API_KEY_EVENT_RECORD KeyEvent;
    struct API_MOUSE_EVENT_RECORD MouseEvent;
    struct API_WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
    struct API_MENU_EVENT_RECORD MenuEvent;
    struct API_FOCUS_EVENT_RECORD FocusEvent;
} API_CONSOLE_INPUT_RECORD_EVENT;

typedef struct API_INPUT_RECORD {
    Byte EventType;
    struct API_CONSOLE_INPUT_RECORD_EVENT Event;
} API_INPUT_RECORD;

typedef struct API_CONSOLE_CURSOR_INFO {
    Long dwSize;
    Long bVisible;
} API_CONSOLE_CURSOR_INFO;

typedef struct API_CPINFO {
    Long MaxCharSize;
    Byte DefaultChar[2];
    Byte LeadByte[12];
} API_CPINFO;

typedef struct API_CHAR_INFO {
    Integer Char;
    Integer Attributes;
} API_CHAR_INFO;

/* Functions defined in module: KernelConsole */
    extern long API_AllocConsole(void);
    extern long API_FreeConsole(void);
    extern MBOOL API_AttachConsole(long dwProcessId);
    extern long API_SetConsoleTitle(String lpConsoleTitle);
    extern long API_SetConsoleTitleUnicode(String lpConsoleTitle);
    extern long API_GetConsoleTitle(String lpConsoleTitle, long nSize);
    extern long API_GetConsoleTitleUnicode(String lpConsoleTitle, long nSize);
    extern long API_SetConsoleCursorPosition(long hConsoleOutput, long dwCursorPosition);
    extern long API_GetConsoleScreenBufferInfo(long hConsoleOutput, struct API_CONSOLE_SCREEN_BUFFER_INFO FAR* lpConsoleScreenBufferInfo);
    extern long API_SetConsoleTextAttribute(long hConsoleOutput, long wAttributes);
    extern long API_FillConsoleOutputCharacter(long hConsoleOutput, Byte cCharacter, long nLength, long dwWriteCoord, long FAR* lpNumberOfCharsWritten);
    extern long API_FillConsoleOutputAttribute(long hConsoleOutput, long wAttribute, long nLength, long dwWriteCoord, long FAR* lpNumberOfAttrsWritten);
    extern long API_SetConsoleScreenBufferSize(long hConsoleOutput, long dwSize);
    extern long API_SetConsoleCursorInfo(long hConsoleOutput, struct API_CONSOLE_CURSOR_INFO FAR* lpConsoleCursorInfo);
    extern long API_GetConsoleCursorInfo(long hConsoleOutput, struct API_CONSOLE_CURSOR_INFO FAR* lpConsoleCursorInfo);
    extern long API_SetConsoleWindowInfo(long hConsoleOutput, long bAbsolute, struct API_SMALL_RECT FAR* lpConsoleWindow);
    extern long API_WriteConsole(long hConsoleOutput, Any lpBuffer, long nNumberOfCharsToWrite, long FAR* lpNumberOfCharsWritten, Any lpReserved);
    extern long API_WriteConsoleUnicode(long hConsoleOutput, Any lpBuffer, long nNumberOfCharsToWrite, long FAR* lpNumberOfCharsWritten, Any lpReserved);
    extern long API_FlushConsoleInputBuffer(long hConsoleInput);
    extern long API_ReadConsoleInput(long hConsoleInput, struct API_INPUT_RECORD FAR* lpBuffer, long nLength, long FAR* lpNumberOfEventsRead);
    extern long API_CloseConsoleHandle(long hConsoleHandle);
    extern long API_SetConsoleMode(long hConsoleHandle, long dwMode);
    extern long API_SetConsoleCtrlHandler(long HandlerRoutine, long Add);
    extern struct API_COORD API_GetLargestConsoleWindowSize(long hConsoleOutput);

typedef struct API_PROCESSENTRY32 {
    long dwSize;
    long cntUsage;
    long th32ProcessID;
    long th32DefaultHeapID;
    long th32ModuleID;
    long cntThreads;
    long th32ParentProcessID;
    long pcPriClassBase;
    long dwFlags;
    Byte szExeFile[260];
} API_PROCESSENTRY32;

typedef struct API_MODULEENTRY32 {
    long dwSize;
    long th32ModuleID;
    long th32ProcessID;
    long GlblcntUsage;
    long ProccntUsage;
    long modBaseAddr;
    long modBaseSize;
    long hModule;
    Byte szModule[256];
    Byte szExePath[260];
} API_MODULEENTRY32;

typedef struct API_PROCESS_MEMORY_COUNTERS {
    long cb;
    long PageFaultCount;
    Integer PeakWorkingSetSize;
    Integer WorkingSetSize;
    Integer QuotaPeakPagedPoolUsage;
    Integer QuotaPagedPoolUsage;
    Integer QuotaPeakNonPagedPoolUsage;
    Integer QuotaNonPagedPoolUsage;
    Integer PagefileUsage;
    Integer PeakPagefileUsage;
} API_PROCESS_MEMORY_COUNTERS;

typedef struct API_MODULEINFO {
    Long lpBaseOfDll;
    Long SizeOfImage;
    Long EntryPoint;
} API_MODULEINFO;

typedef struct API_STARTUPINFO {
    Long cb;
    Long lpReserved;
    Long lpDesktop;
    Long lpTitle;
    Long dwX;
    Long dwY;
    Long dwXSize;
    Long dwYSize;
    Long dwXCountChars;
    Long dwYCountChars;
    Long dwFillAttribute;
    Long dwFlags;
    Integer wShowWindow;
    Integer cbReserved2;
    Long lpReserved2;
    Long hStdInput;
    Long hStdOutput;
    Long hStdError;
} API_STARTUPINFO;

typedef struct API_PROCESS_INFORMATION {
    Long hProcess;
    Long hThread;
    Long dwProcessId;
    Long dwThreadId;
} API_PROCESS_INFORMATION;

typedef enum API_PROCESSENUMS {
    PROCESS_ALL_ACCESS = 2035711,
    PROCESS_CREATE_THREAD = 2,
    PROCESS_CREATE_PROCESS = 128,
    PROCESS_DUP_HANDLE = 64,
    PROCESS_HEAP_ENTRY_BUSY = 4,
    PROCESS_HEAP_ENTRY_DDESHARE = 32,
    PROCESS_HEAP_ENTRY_MOVEABLE = 16,
    PROCESS_HEAP_REGION = 1,
    PROCESS_HEAP_UNCOMMITTED_RANGE = 2,
    PROCESS_QUERY_INFORMATION = 1024,
    PROCESS_SET_INFORMATION = 512,
    PROCESS_SET_QUOTA = 256,
    PROCESS_TERMINATE = 1,
    PROCESS_VM_OPERATION = 8,
    PROCESS_VM_READ = 16,
    PROCESS_VM_WRITE = 32,
    MAX_MODULE_NAME32 = 255,
    TH32CS_INHERIT = 0x80000000,
    TH32CS_SNAPHEAPLIST = 1,
    TH32CS_SNAPPROCESS = 2,
    TH32CS_SNAPTHREAD = 4,
    TH32CS_SNAPMODULE = 8,
    TH32CS_SNAPMODULE32 = 16,
    TH32CS_SNAPALL = 15,
    STD_ERROR_HANDLE = -12,
    STD_INPUT_HANDLE = -10,
    STD_OUTPUT_HANDLE = -11
} API_PROCESSENUMS;

/* Functions defined in module: KernelProcess */
    extern long API_GetCurrentProcess(void);
    extern long API_GetCurrentProcessId(void);
    extern long API_GetProcessId(long Process);
    extern long API_CreateToolhelp32Snapshot(long dwFlags, long th32ProcessID);
    extern long API_Toolhelp32ReadProcessMemory(long th32ProcessID, Any lpBaseAddress, Any lpBuffer, long cbRead, long FAR* lpNumberOfBytesRead);
    extern long API_Process32First(long hSnapshot, struct API_PROCESSENTRY32 FAR* lppe);
    extern long API_Process32Next(long hSnapshot, struct API_PROCESSENTRY32 FAR* lppe);
    extern long API_Module32First(long hSnapshot, struct API_MODULEENTRY32 FAR* lppe);
    extern long API_Module32Next(long hSnapshot, struct API_MODULEENTRY32 FAR* lppe);
    extern long API_GetModuleHandle(String lpModuleName);
    extern long API_GetModuleHandleUnicode(WString lpModuleName);
    extern long API_GetModuleFileName(long hModule, String lpFileName, long nSize);
    extern long API_GetModuleFileNameUnicode(long hModule, WString lpFileName, long nSize);
    extern long API_CreateProcess(String lpApplicationName, String lpCommandLine, Any lpProcessAttributes, Any lpThreadAttributes, long bInheritHandles, long dwCreationFlags, Any lpEnvironment, String lpCurrentDirectory, struct API_STARTUPINFO FAR* lpStartupInfo, struct API_PROCESS_INFORMATION FAR* lpProcessInformation);
    extern long API_CreateProcessUnicode(WString lpApplicationName, WString lpCommandLine, Any lpProcessAttributes, Any lpThreadAttributes, long bInheritHandles, long dwCreationFlags, Any lpEnvironment, WString lpCurrentDirectory, struct API_STARTUPINFO FAR* lpStartupInfo, struct API_PROCESS_INFORMATION FAR* lpProcessInformation);
    extern long API_OpenProcess(long dwDesiredAccess, long blnheritHandle, long dwAppProcessId);
    extern long API_GetExitCodeProcess(long hProcess, long FAR* lpExitCode);
    extern void API_ExitProcess(long uExitCode);
    extern long API_TerminateProcess(long hProcess, long uExitCode);
    extern void API_FatalExit(long uExitCode);
    extern void API_FatalAppExit(long uAction, String lpMessageText);
    extern void API_FatalAppExitUnicode(long uAction, String lpMessageText);
    extern void API_ReadProcessMemory(long hProcess, long lpBaseAddress, Any lpBuffer, long nSize, long FAR* lpNumberOfBytesReaded);
    extern void API_WriteProcessMemory(long hProcess, long lpBaseAddress, Any lpBuffer, long nSize, long FAR* lpNumberOfBytesWritten);
    extern void API_GetStartupInfo(struct API_STARTUPINFO FAR* lpStartupInfo);
    extern void API_GetStartupInfoUnicode(struct API_STARTUPINFO FAR* lpStartupInfo);
    extern long API_GetProcessVersion(long dwProcessId);

/* Functions defined in module: PSAPI */
    extern long API_EnumProcessModules(long hProcess, long FAR* lphModule, long cb, long FAR* lpcbNeeded);
    extern long API_GetProcessMemoryInfo(long hProcess, struct API_PROCESS_MEMORY_COUNTERS FAR* ppsmemCounters, long cb);
    extern long API_GetModuleInformation(long hProcess, long hModule, struct API_MODULEINFO FAR* ppsmemCounters, long cb);
    extern long API_GetModuleFileNameEx(long hProcess, long hModule, WString lpFilename, long nSize);
    extern long API_GetModuleFileNameExUnicode(long hProcess, long hModule, WString lpFilename, long nSize);
    extern long API_GetModuleBaseName(long hProcess, long hModule, String lpBaseName, long nSize);
    extern long API_GetModuleBaseNameUnicode(long hProcess, long hModule, WString lpBaseName, long nSize);

typedef enum API_THREADING_CONSTANTS {
    API_CRITICALSECTION_SIZE = 24
} API_THREADING_CONSTANTS;

typedef enum API_THREAD_FLAGS {
    THREAD_TERMINATE = 1,
    THREAD_SUSPEND_RESUME = 2,
    THREAD_GET_CONTEXT = 8,
    THREAD_SET_CONTEXT = 16,
    THREAD_SET_INFORMATION = 32,
    THREAD_QUERY_INFORMATION = 64,
    THREAD_SET_THREAD_TOKEN = 128,
    THREAD_IMPERSONATE = 256,
    THREAD_DIRECT_IMPERSONATION = 512
} API_THREAD_FLAGS;

typedef enum API_CONTEXT_FLAGS_i386 {
    i386_CONTEXT_CONTROL = 65537,
    i386_CONTEXT_INTEGER = 65538,
    i386_CONTEXT_SEGMENTS = 65540,
    i386_CONTEXT_FLOATING_POINT = 65544,
    i386_CONTEXT_DEBUG_REGISTERS = 65552,
    i386_CONTEXT_EXTENDED_REGISTERS = 65568,
    i386_CONTEXT_FULL = 196615,
    i386_CONTEXT_ALL = 393279
} API_CONTEXT_FLAGS_i386;

typedef enum API_CONTEXT_FLAGS_AMD64 {
    AMD64_CONTEXT_CONTROL = 1048577,
    AMD64_CONTEXT_INTEGER = 1048578,
    AMD64_CONTEXT_SEGMENTS = 1048580,
    AMD64_CONTEXT_FLOATING_POINT = 1048584,
    AMD64_CONTEXT_DEBUG_REGISTERS = 1048592,
    AMD64_CONTEXT_FULL = 3145739,
    AMD64_CONTEXT_ALL = 5242911,
    AMD64_CONTEXT_EXCEPTION_ACTIVE = 134217728,
    AMD64_CONTEXT_SERVICE_ACTIVE = 268435456,
    AMD64_CONTEXT_EXCEPTION_REQUEST = 1073741824,
    AMD64_CONTEXT_EXCEPTION_REPORTING = 0x80000000
} API_CONTEXT_FLAGS_AMD64;

typedef enum API_CONTEXT_FLAGS_IA64 {
    IA64_CONTEXT_CONTROL = 524289,
    IA64_CONTEXT_LOWER_FLOATING_POINT = 524290,
    IA64_CONTEXT_HIGHER_FLOATING_POINT = 524292,
    IA64_CONTEXT_INTEGER = 524296,
    IA64_CONTEXT_DEBUG = 524304,
    IA64_CONTEXT_IA32_CONTROL = 524320,
    IA64_CONTEXT_FLOATING_POINT = 1048582,
    IA64_CONTEXT_FULL = 2621487,
    IA64_CONTEXT_ALL = 3145791,
    IA64_CONTEXT_EXCEPTION_ACTIVE = 134217728,
    IA64_CONTEXT_SERVICE_ACTIVE = 268435456,
    IA64_CONTEXT_EXCEPTION_REQUEST = 1073741824,
    IA64_CONTEXT_EXCEPTION_REPORTING = 0x80000000
} API_CONTEXT_FLAGS_IA64;

typedef struct API_THREADENTRY32 {
    long dwSize;
    long cntUsage;
    long th32ThreadID;
    long th32OwnerProcessID;
    long tpBasePri;
    long tpDeltaPri;
    long dwFlags;
} API_THREADENTRY32;

typedef struct API_LDT_ENTRY {
    Integer LimitLow;
    Integer BaseLow;
    long HighWord;
} API_LDT_ENTRY;

typedef struct API_FLOATING_SAVE_AREA {
    long ControlWord;
    long StatusWord;
    long TagWord;
    long ErrorOffset;
    long ErrorSelector;
    long DataOffset;
    long DataSelector;
    Byte RegisterArea[80];
    long Cr0NpxState;
} API_FLOATING_SAVE_AREA;

typedef struct API_CONTEXT_i386 {
    API_CONTEXT_FLAGS_i386 ContextFlags;
    long Dr0;
    long Dr1;
    long Dr2;
    long Dr3;
    long Dr6;
    long Dr7;
    struct API_FLOATING_SAVE_AREA FloatSave;
    long SegGs;
    long SegFs;
    long SegEs;
    long SegDs;
    long Edi;
    long Esi;
    long Ebx;
    long Edx;
    long Ecx;
    long Eax;
    long Ebp;
    long Eip;
    long SegCs;
    long EFlags;
    long Esp;
    long SegSs;
    Byte ExtendedRegisters[512];
} API_CONTEXT;

typedef struct API_M128A {
    Int64 Low;
    Int64 High;
} API_M128A;

typedef struct API_XMM_SAVE_AREA32 {
    Integer ControlWord;
    Integer StatusWord;
    Byte TagWord;
    Byte Reserved1;
    Integer ErrorOpcode;
    long ErrorOffset;
    Integer ErrorSelector;
    Integer Reserved2;
    long DataOffset;
    Integer DataSelector;
    Integer Reserved3;
    long MxCsr;
    long MxCsr_Mask;
    struct API_M128A FloatRegisters[8];
    struct API_M128A XmmRegisters[16];
    Byte Reserved4[96];
} API_XMM_SAVE_AREA32;

typedef struct API_CONTEXT_AMD64 {
    Int64 P1Home;
    Int64 P2Home;
    Int64 P3Home;
    Int64 P4Home;
    Int64 P5Home;
    Int64 P6Home;
    API_CONTEXT_FLAGS_AMD64 ContextFlags;
    long MxCsr;
    Integer SegCs;
    Integer SegDs;
    Integer SegEs;
    Integer SegFs;
    Integer SegGs;
    Integer SegSs;
    long EFlags;
    Int64 Dr0;
    Int64 Dr1;
    Int64 Dr2;
    Int64 Dr3;
    Int64 Dr6;
    Int64 Dr7;
    Int64 Rax;
    Int64 Rcx;
    Int64 Rdx;
    Int64 Rbx;
    Int64 Rsp;
    Int64 Rbp;
    Int64 Rsi;
    Int64 Rdi;
    Int64 R8;
    Int64 R9;
    Int64 R10;
    Int64 R11;
    Int64 R12;
    Int64 R13;
    Int64 R14;
    Int64 R15;
    Int64 Rip;
    struct API_XMM_SAVE_AREA32 FltSave;
    Int128 VectorRegister[26];
    Int64 VectorControl;
    Int64 DebugControl;
    Int64 LastBranchToRip;
    Int64 LastBranchFromRip;
    Int64 LastExceptionToRip;
    Int64 LastExceptionFromRip;
} API_CONTEXT_AMD64;

typedef struct API_CONTEXT_IA64 {
    API_CONTEXT_FLAGS_IA64 ContextFlags;
    long Fill1[3];
    UInt64 DbI0;
    UInt64 DbI1;
    UInt64 DbI2;
    UInt64 DbI3;
    UInt64 DbI4;
    UInt64 DbI5;
    UInt64 DbI6;
    UInt64 DbI7;
    UInt64 DbD0;
    UInt64 DbD1;
    UInt64 DbD2;
    UInt64 DbD3;
    UInt64 DbD4;
    UInt64 DbD5;
    UInt64 DbD6;
    UInt64 DbD7;
    Float128 FltS0;
    Float128 FltS1;
    Float128 FltS2;
    Float128 FltS3;
    Float128 FltT0;
    Float128 FltT1;
    Float128 FltT2;
    Float128 FltT3;
    Float128 FltT4;
    Float128 FltT5;
    Float128 FltT6;
    Float128 FltT7;
    Float128 FltT8;
    Float128 FltT9;
    Float128 FltS4;
    Float128 FltS5;
    Float128 FltS6;
    Float128 FltS7;
    Float128 FltS8;
    Float128 FltS9;
    Float128 FltS10;
    Float128 FltS11;
    Float128 FltS12;
    Float128 FltS13;
    Float128 FltS14;
    Float128 FltS15;
    Float128 FltS16;
    Float128 FltS17;
    Float128 FltS18;
    Float128 FltS19;
    Float128 FltF32;
    Float128 FltF33;
    Float128 FltF34;
    Float128 FltF35;
    Float128 FltF36;
    Float128 FltF37;
    Float128 FltF38;
    Float128 FltF39;
    Float128 FltF40;
    Float128 FltF41;
    Float128 FltF42;
    Float128 FltF43;
    Float128 FltF44;
    Float128 FltF45;
    Float128 FltF46;
    Float128 FltF47;
    Float128 FltF48;
    Float128 FltF49;
    Float128 FltF50;
    Float128 FltF51;
    Float128 FltF52;
    Float128 FltF53;
    Float128 FltF54;
    Float128 FltF55;
    Float128 FltF56;
    Float128 FltF57;
    Float128 FltF58;
    Float128 FltF59;
    Float128 FltF60;
    Float128 FltF61;
    Float128 FltF62;
    Float128 FltF63;
    Float128 FltF64;
    Float128 FltF65;
    Float128 FltF66;
    Float128 FltF67;
    Float128 FltF68;
    Float128 FltF69;
    Float128 FltF70;
    Float128 FltF71;
    Float128 FltF72;
    Float128 FltF73;
    Float128 FltF74;
    Float128 FltF75;
    Float128 FltF76;
    Float128 FltF77;
    Float128 FltF78;
    Float128 FltF79;
    Float128 FltF80;
    Float128 FltF81;
    Float128 FltF82;
    Float128 FltF83;
    Float128 FltF84;
    Float128 FltF85;
    Float128 FltF86;
    Float128 FltF87;
    Float128 FltF88;
    Float128 FltF89;
    Float128 FltF90;
    Float128 FltF91;
    Float128 FltF92;
    Float128 FltF93;
    Float128 FltF94;
    Float128 FltF95;
    Float128 FltF96;
    Float128 FltF97;
    Float128 FltF98;
    Float128 FltF99;
    Float128 FltF100;
    Float128 FltF101;
    Float128 FltF102;
    Float128 FltF103;
    Float128 FltF104;
    Float128 FltF105;
    Float128 FltF106;
    Float128 FltF107;
    Float128 FltF108;
    Float128 FltF109;
    Float128 FltF110;
    Float128 FltF111;
    Float128 FltF112;
    Float128 FltF113;
    Float128 FltF114;
    Float128 FltF115;
    Float128 FltF116;
    Float128 FltF117;
    Float128 FltF118;
    Float128 FltF119;
    Float128 FltF120;
    Float128 FltF121;
    Float128 FltF122;
    Float128 FltF123;
    Float128 FltF124;
    Float128 FltF125;
    Float128 FltF126;
    Float128 FltF127;
    UInt64 StFPSR;
    UInt64 IntGp;
    UInt64 IntT0;
    UInt64 IntT1;
    UInt64 IntS0;
    UInt64 IntS1;
    UInt64 IntS2;
    UInt64 IntS3;
    UInt64 IntV0;
    UInt64 IntT2;
    UInt64 IntT3;
    UInt64 IntT4;
    UInt64 IntSp;
    UInt64 IntTeb;
    UInt64 IntT5;
    UInt64 IntT6;
    UInt64 IntT7;
    UInt64 IntT8;
    UInt64 IntT9;
    UInt64 IntT10;
    UInt64 IntT11;
    UInt64 IntT12;
    UInt64 IntT13;
    UInt64 IntT14;
    UInt64 IntT15;
    UInt64 IntT16;
    UInt64 IntT17;
    UInt64 IntT18;
    UInt64 IntT19;
    UInt64 IntT20;
    UInt64 IntT21;
    UInt64 IntT22;
    UInt64 IntNats;
    UInt64 Preds;
    UInt64 BrRp;
    UInt64 BrS0;
    UInt64 BrS1;
    UInt64 BrS2;
    UInt64 BrS3;
    UInt64 BrS4;
    UInt64 BrT0;
    UInt64 BrT1;
    UInt64 ApUNAT;
    UInt64 ApLC;
    UInt64 ApEC;
    UInt64 ApCCV;
    UInt64 ApDCR;
    UInt64 RsPFS;
    UInt64 RsBSP;
    UInt64 RsBSPSTORE;
    UInt64 RsRSC;
    UInt64 RsRNAT;
    UInt64 StIPSR;
    UInt64 StIIP;
    UInt64 StIFS;
    UInt64 StFCR;
    UInt64 Eflag;
    UInt64 SegCSD;
    UInt64 SegSSD;
    UInt64 Cflag;
    UInt64 StFSR;
    UInt64 StFIR;
    UInt64 StFDR;
    UInt64 UNUSEDPACK;
} API_CONTEXT_IA64;

typedef struct API_CRITICAL_SECTION_DEBUG {
    Integer Type;
    Integer CreatorBackTraceIndex;
    long CriticalSection;
    struct API_LIST_ENTRY ProcessLocksList;
    long EntryCount;
    long ContentionCount;
    long Spare[2];
} API_CRITICAL_SECTION_DEBUG;

typedef struct API_CRITICAL_SECTION {
    struct API_CRITICAL_SECTION_DEBUG DebugInfo;
    long LockCount;
    long RecursionCount;
    long OwningThread;
    long LockSemaphore;
    long SpinCount;
} API_CRITICAL_SECTION;

typedef struct API_TEB {
    long pvExcept;
    long pvStackUserTop;
    long pvStackUserBase;
    long SubSystemTib;
    long FiberData;
    long pvArbitrary;
    long pTIBSelf;
    long Unknown1;
    long ProcessID;
    long ThreadID;
    long Unknown2;
    long pvTLSArray;
} API_TEB;

/* Functions defined in module: KernelThreading */
    extern long API_GetCurrentThreadId(void);
    extern long API_GetCurrentThread(void);
    extern long API_CreateThread(Any lpThreadAttributes, long dwStackSize, long lpStartAddress, Any lpParameter, long dwCreationFlags, long FAR* lpThreadId);
    extern long API_OpenThread(long dwDesiredAccess, long bInheritHandle, long dwThreadId);
    extern long API_ExitThread(long dwExitCode);
    extern long API_GetExitCodeThread(long hThread, long FAR* lpExitCode);
    extern long API_TerminateThread(long hThread, long dwExitCode);
    extern long API_SuspendThread(long hThread);
    extern long API_ResumeThread(long hThread);
    extern long API_Thread32First(long hSnapshot, struct API_THREADENTRY32 FAR* lpte);
    extern long API_Thread32Next(long hSnapshot, struct API_THREADENTRY32 FAR* lpte);
    extern long API_GetOwnerProcess(void);
    extern long API_SwitchToThread(void);
    extern long API_SetThreadIdealProcessor(long hThread, long dwIdealProcessor);
    extern long API_GetThreadContext(long hThread, struct API_CONTEXT_i386 FAR* lpContext);
    extern long API_GetThreadDesktop(long dwThread);
    extern long API_GetThreadLocale(void);
    extern long API_GetThreadPriority(long hThread);
    extern long API_GetThreadSelectorEntry(long hThread, long dwSelector, struct API_LDT_ENTRY FAR* lpSelectorEntry);
    extern long API_GetThreadTimes(long hThread, struct API_FILETIME FAR* lpCreationTime, struct API_FILETIME FAR* lpExitTime, struct API_FILETIME FAR* lpKernelTime, struct API_FILETIME FAR* lpUserTime);
    extern long API_SetThreadAffinityMask(long hThread, long dwThreadAffinityMask);
    extern long API_SetThreadDesktop(long hDesktop);
    extern long API_SetThreadContext(long hThread, struct API_CONTEXT_i386 FAR* lpContext);
    extern long API_SetThreadLocale(long Locale);
    extern long API_SetThreadPriority(long hThread, long nPriority);
    extern long API_SetThreadToken(long hThread, long Token);
    extern long API_Sleep(long dwMilliseconds);
    extern long API_DisableThreadLibraryCalls(long hLibModule);

/* Functions defined in module: KernelSynch */
    extern long API_CreateSemaphore(Any lpSemaphoreAttributes, long lInitialCount, long lMaximumCount, String lpName);
    extern long API_OpenSemaphore(long dwDesiredAccess, long bInheritHandle, String lpName);
    extern long API_ReleaseSemaphore(long hSemaphore, long lReleaseCount, long FAR* lpPreviousCount);
    extern long API_CreateMutex(Any lpMutexAttributes, long bInitialOwner, String lpName);
    extern long API_OpenMutex(long dwDesiredAccess, long bInheritHandle, String lpName);
    extern long API_ReleaseMutex(long hMutex);
    extern void API_EnterCriticalSection(long lpCriticalSection_dummy);
    extern long API_TryEnterCriticalSection(long lpCriticalSection_dummy);
    extern void API_LeaveCriticalSection(long lpCriticalSection_dummy);
    extern void API_InitializeCriticalSection(long lpCriticalSection_dummy);
    extern void API_DeleteCriticalSection(long lpCriticalSection_dummy);
    extern long API_InitializeCriticalSectionAndSpinCount(long lpCriticalSection_dummy, long dwSpinCount);
    extern long API_InterlockedIncrement(long FAR* lpAddend);
    extern long API_InterlockedDecrement(long FAR* lpAddend);
    extern long API_InterlockedExchange(long FAR* Target, long Value);
    extern long API_InterlockedExchangeAdd(long FAR* Target, long Value);
    extern long API_InterlockedCompareExchange(Any Destination, Any Exchange, Any Comperand);
    extern long API_WaitCommEvent(long hFile, long FAR* lpEvtMask, Any lpOverlapped);
    extern long API_WaitForDebugEvent(Any lpDebugEvent, long dwMilliseconds, Any lpOverlapped);
    extern long API_WaitForMultipleObjects(long nCount, long FAR* lpHandles, long bWaitAll, long dwMilliseconds);
    extern long API_WaitForMultipleObjectsEx(long nCount, long FAR* lpHandles, long bWaitAll, long dwMilliseconds, long bAlertable);
    extern long API_WaitForSingleObject(long hHandle, long dwMilliseconds);
    extern long API_WaitForSingleObjectEx(long hHandle, long dwMilliseconds, long bAlertable);
    extern long API_MsgWaitForMultipleObjects(long nCount, long FAR* pHandles, Boolean fWaitAll, long dwMilliseconds, long dwWakeMask);
    extern long API_MsgWaitForMultipleObjectsEx(long nCount, long FAR* pHandles, Boolean fWaitAll, long dwMilliseconds, long dwWakeMask, long dwFlags);
    extern Boolean API_SetEvent(long hEvent);
    extern Boolean API_ResetEvent(long hEvent);
    extern Boolean API_PulseEvent(long hEvent);
    extern long API_CreateEvent(Any lpEventAttributes, Boolean bManualReset, Boolean bInitialState, String lpName);
    extern long API_CreateEventUnicode(Any lpEventAttributes, Boolean bManualReset, Boolean bInitialState, WString lpName);
    extern long API_OpenEvent(long dwDesiredAccess, Boolean bInheritHandle, Boolean bInitialState, String lpName);
    extern long API_OpenEventUnicode(long dwDesiredAccess, Boolean bInheritHandle, Boolean bInitialState, WString lpName);

typedef struct API_HEAPENTRY32 {
    Integer dwSize;
    long hHandle;
    long dwAddress;
    Integer dwBlockSize;
    long dwFlags;
    long dwLockCount;
    long dwResvd;
    long th32ProcessID;
    long th32HeapID;
} API_HEAPENTRY32;

typedef struct API_PROCESS_HEAP_ENTRY {
    long lpData;
    long cbData;
    Byte cbOverhead;
    Byte iRegionIndex;
    Integer wFlags;
} API_PROCESS_HEAP_ENTRY;

typedef struct API_PROCESS_HEAP_ENTRY_UNION1 {
    long hMem;
    long dwReserved[3];
} API_PROCESS_HEAP_ENTRY_UNION1;

typedef struct API_PROCESS_HEAP_ENTRY_UNION2 {
    long dwCommittedSize;
    long dwUnCommittedSize;
    long lpFirstBlock;
    long lpLastBlock;
} API_PROCESS_HEAP_ENTRY_UNION2;

typedef struct API_HEAPLIST32 {
    Integer dwSize;
    long th32ProcessID;
    long th32HeapID;
    long dwFlags;
} API_HEAPLIST32;

/* Functions defined in module: KernelHeap */
    extern long API_GetProcessHeap(void);
    extern long API_Heap32First(struct API_HEAPENTRY32 FAR* lphe, long th32ProcessID, long FAR* th32HeapID);
    extern long API_Heap32Next(struct API_HEAPENTRY32 FAR* lphe);
    extern long API_Heap32ListNext(long hSnapshot, struct API_HEAPLIST32 FAR* lphl);
    extern long API_Heap32ListFirst(long hSnapshot, struct API_HEAPLIST32 FAR* lphl);
    extern long API_HeapAlloc(long hHeap, long dwFlags, long dwBytes);
    extern long API_HeapCompact(long hHeap, long dwFlags);
    extern long API_HeapCreate(long flOptions, long dwInitialSize, long dwMaximumSize);
    extern long API_HeapDestroy(long hHeap);
    extern long API_HeapFree(long hHeap, long dwFlags, long lpMem);
    extern long API_HeapLock(long hHeap);
    extern long API_HeapReAlloc(long hHeap, long dwFlags, long lpMem, long dwBytes);
    extern long API_HeapSize(long hHeap, long dwFlags, long lpMem);
    extern long API_HeapUnlock(long hHeap);
    extern long API_HeapValidate(long hHeap, long dwFlags, long lpMem);
    extern long API_HeapWalk(long hHeap, struct API_PROCESS_HEAP_ENTRY FAR* lpEntry);

typedef struct API_NOTIFYICONDATA {
    long cbSize;
    long hwnd;
    long uID;
    long uFlags;
    long uCallbackMessage;
    long hIcon;
    char szTip[64];
} API_NOTIFYICONDATA;

typedef struct API_SHFILEINFO {
    long hIcon;
    long iIcon;
    long dwAttributes;
    char szDisplayName[256];
    char szTypeName[80];
} API_SHFILEINFO;

typedef struct API_SHFILEOPSTRUCT {
    long hwnd;
    long wFunc;
    String pFrom;
    String pTo;
    short fFlags;
    long fAnyOperationsAborted;
    long hNameMappings;
    String lpszProgressTitle;
} API_SHFILEOPSTRUCT;

typedef struct API_SHNAMEMAPPING {
    String pszOldPath;
    String pszNewPath;
    long cchOldPath;
    long cchNewPath;
} API_SHNAMEMAPPING;

typedef struct API_SHELLEXECUTEINFO {
    long cbSize;
    long fMask;
    long hwnd;
    String lpVerb;
    String lpFile;
    String lpParameters;
    String lpDirectory;
    long nShow;
    long hInstApp;
    long lpIDList;
    String lpClass;
    long hkeyClass;
    long dwHotKey;
    long hIcon;
    long hProcess;
} API_SHELLEXECUTEINFO;

typedef struct API_BROWSEINFO {
    long hOwner;
    long pidlRoot;
    String pszDisplayName;
    String lpszTitle;
    long ulFlags;
    long lpfn;
    long lParam;
    long iImage;
} API_BROWSEINFO;

typedef struct API_AppBarData {
    long cbSize;
    long hWnd;
    long uCallbackMessage;
    long uEdge;
    struct API_RECT rc;
    long lParam;
} API_AppBarData;

typedef struct API_SH_ITEM_ID {
    long cb;
    Byte abID;
} API_SH_ITEM_ID;

typedef struct API_ITEMIDLIST {
    struct API_SH_ITEM_ID mkid;
} API_ITEMIDLIST;

/* Functions defined in module: Shell32 */
    extern long API_ShellAbout(long hwnd, String szApp, String szOtherStuff, long hIcon);
    extern long API_ShellExecute(long hwnd, String lpOperation, String lpFile, String lpParameters, String lpDirectory, long nShowCmd);
    extern long API_SHGetSpecialFolderLocation(long hWndOwner, long nFolder, struct API_ITEMIDLIST FAR* pidl);
    extern long API_SHFreeNameMappings(long hNameMappings);
    extern HRESULT API_SHGetMalloc(IMalloc FAR* FAR* ppMalloc);

/* Functions defined in module: KernelDebugger */

#endif
