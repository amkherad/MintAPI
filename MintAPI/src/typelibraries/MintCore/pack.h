/* This header file machine-generated by mktyplib.exe */
/* Interface to type library: MintCore */

#ifndef _MintCore_H_
#define _MintCore_H_

DEFINE_GUID(LIBID_MintCore,0x00000000L,0x7700,0x0145,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);
#ifndef BEGIN_INTERFACE
#define BEGIN_INTERFACE
#endif

typedef void FAR* Any;

typedef void FAR* AnyArr;

typedef LPSTR String;

typedef LPWSTR WString;

typedef unsigned char Byte;

typedef long Long;

typedef unsigned long ULong;

typedef short Integer;

typedef int Boolean;

typedef CY Currency;

typedef CY Date;

typedef VARIANT Variant;

typedef short WORD;

typedef long DWORD;

typedef unsigned char UCHAR;

typedef unsigned short UWORD;

typedef unsigned long UDWORD;

typedef BSTR MLPSTR;

typedef BSTR HLSTR;

typedef BSTR MLPWSTR;

typedef long MHANDLE;

typedef long MColor;

typedef long MERROR_ID;

typedef long MFILE_HANDLE;

typedef char MCHAR;

typedef MCHAR FAR* MBSTR;

typedef unsigned char MUCHAR;

typedef wchar_t MWCHAR;

typedef MWCHAR FAR* MWBSTR;

typedef void MLPVOID;

typedef long MLCID;

typedef long MDISPID;

typedef long MHRESULT;

typedef void FAR* MAny;

typedef int MBOOL;

typedef struct Int32 {
    long Value;
} Int32;

typedef struct UInt32 {
    long Value;
} UInt32;

typedef struct Int64 {
    long LowerPart;
    long HigherPart;
} Int64;

typedef struct UInt64 {
    long LowerPart;
    long HigherPart;
} UInt64;

typedef struct Int128 {
    struct Int64 LowerPart;
    struct Int64 HigherPart;
} Int128;

typedef struct UInt128 {
    struct UInt64 LowerPart;
    struct UInt64 HigherPart;
} UInt128;

typedef struct Int256 {
    struct Int128 LowerPart;
    struct Int128 HigherPart;
} Int256;

typedef struct UInt256 {
    struct UInt128 LowerPart;
    struct UInt128 HigherPart;
} UInt256;

typedef struct Float64 {
    long LowerPart;
    long HigherPart;
} Float64;

typedef struct Float128 {
    struct Float64 LowerPart;
    struct Float64 HigherPart;
} Float128;

typedef struct Float256 {
    struct Float128 LowerPart;
    struct Float128 HigherPart;
} Float256;

typedef struct Int32 MInt32;

typedef struct Int64 MInt64;

typedef struct Int128 MInt128;

typedef enum OperationStatus {
    Successfull = 0,
    Failure = 1
} OperationStatus;

typedef enum API_STGC {
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
} API_STGC;

typedef enum API_StreamSeek {
    SS_SET = 0,
    SS_CUR = 1,
    SS_END = 2
} API_StreamSeek;

typedef enum API_WindowMessage {
    wm_Null = 0,
    wm_Create = 1,
    wm_Destroy = 2,
    wm_Move = 3,
    wm_Size = 5,
    wm_Activate = 6,
    wm_SetFocus = 7,
    wm_KillFocus = 8,
    wm_Enable = 10,
    wm_SetRedraw = 11,
    wm_SetText = 12,
    wm_GetText = 13,
    wm_GetTextLength = 14,
    wm_Paint = 15,
    wm_Close = 16,
    wm_QueryEndSession = 17,
    wm_Quit = 18,
    wm_QueryOpen = 19,
    wm_EraseBackground = 20,
    wm_SystemColorChange = 21,
    wm_EndSession = 22,
    wm_SystemError = 23,
    wm_ShowWindow = 24,
    wm_ControlColor = 25,
    wm_WinIniChange = 26,
    wm_SettingChange = 26,
    wm_DevModeChange = 27,
    wm_ActivateApplication = 28,
    wm_FontChange = 29,
    wm_TimeChange = 30,
    wm_CancelMode = 31,
    wm_SetCursor = 32,
    wm_MouseActivate = 33,
    wm_ChildActivate = 34,
    wm_QueueSync = 35,
    wm_GetMinMaxInfo = 36,
    wm_PaintIcon = 38,
    wm_IconEraseBackground = 39,
    wm_NextDialogControl = 40,
    wm_SpoolerStatus = 42,
    wm_DrawItem = 43,
    wm_MeasureItem = 44,
    wm_DeleteItem = 45,
    wm_VKeyToItem = 46,
    wm_CharToItem = 47,
    wm_SetFont = 48,
    wm_GetFont = 49,
    wm_SetHotkey = 50,
    wm_GetHotkey = 51,
    wm_QueryDragIcon = 55,
    wm_CompareItem = 57,
    wm_Compacting = 65,
    wm_WindowPositionChanging = 70,
    wm_WindowPositionChanged = 71,
    wm_Power = 72,
    wm_CopyData = 74,
    wm_CancelJournal = 75,
    wm_Notify = 78,
    wm_InputLanguageChangeRequest = 80,
    wm_InputLanguageChange = 81,
    wm_TCard = 82,
    wm_Help = 83,
    wm_UserChanged = 84,
    wm_NotifyFormat = 85,
    wm_ContextMenu = 123,
    wm_StyleChanging = 124,
    wm_StyleChanged = 125,
    wm_DisplayChange = 126,
    wm_GetIcon = 127,
    wm_SetIcon = 128,
    wm_NCCreate = 129,
    wm_NCDestroy = 130,
    wm_NCCalculateSize = 131,
    wm_NCHitTest = 132,
    wm_NCPaint = 133,
    wm_NCActivate = 134,
    wm_GetDialogCode = 135,
    wm_NCMouseMove = 160,
    wm_NCLeftButtonDown = 161,
    wm_NCLeftButtonUp = 162,
    wm_NCLeftButtonDoubleClick = 163,
    wm_NCRightButtonDown = 164,
    wm_NCRightButtonUp = 165,
    wm_NCRightButtonDoubleClick = 166,
    wm_NCMiddleButtonDown = 167,
    wm_NCMiddleButtonUp = 168,
    wm_NCMiddleButtonDoubleClick = 169,
    wm_KeyFirst = 256,
    wm_KeyDown = 256,
    wm_KeyUp = 257,
    wm_Char = 258,
    wm_DeadChar = 259,
    wm_SystemKeyDown = 260,
    wm_SystemKeyUp = 261,
    wm_SystemChar = 262,
    wm_SystemDeadChar = 263,
    wm_KeyLast = 264,
    wm_IMEStartComposition = 269,
    wm_IMEEndComposition = 270,
    wm_IMEComposition = 271,
    wm_IMEKeyLast = 271,
    wm_InitializeDialog = 272,
    wm_Command = 273,
    wm_SystemCommand = 274,
    wm_Timer = 275,
    wm_HorizontalScroll = 276,
    wm_VerticalScroll = 277,
    wm_InitializeMenu = 278,
    wm_InitializeMenuPopup = 279,
    wm_MenuSelect = 287,
    wm_MenuChar = 288,
    wm_EnterIdle = 289,
    wm_CTLColorMessageBox = 306,
    wm_CTLColorEdit = 307,
    wm_CTLColorListbox = 308,
    wm_CTLColorButton = 309,
    wm_CTLColorDialog = 310,
    wm_CTLColorScrollBar = 311,
    wm_CTLColorStatic = 312,
    wm_MouseFirst = 512,
    wm_MouseMove = 512,
    wm_LeftButtonDown = 513,
    wm_LeftButtonUp = 514,
    wm_LeftButtonDoubleClick = 515,
    wm_RightButtonDown = 516,
    wm_RightButtonUp = 517,
    wm_RightButtonDoubleClick = 518,
    wm_MiddleButtonDown = 519,
    wm_MiddleButtonUp = 520,
    wm_MiddleButtonDoubleClick = 521,
    wm_MouseWheel = 522,
    wm_MouseHorizontalWheel = 526,
    wm_ParentNotify = 528,
    wm_EnterMenuLoop = 529,
    wm_ExitMenuLoop = 530,
    wm_NextMenu = 531,
    wm_Sizing = 532,
    wm_CaptureChanged = 533,
    wm_Moving = 534,
    wm_PowerBroadcast = 536,
    wm_DeviceChange = 537,
    wm_MDICreate = 544,
    wm_MDIDestroy = 545,
    wm_MDIActivate = 546,
    wm_MDIRestore = 547,
    wm_MDINext = 548,
    wm_MDIMaximize = 549,
    wm_MDITile = 550,
    wm_MDICascade = 551,
    wm_MDIIconArrange = 552,
    wm_MDIGetActive = 553,
    wm_MDISetMenu = 560,
    wm_EnterSizeMove = 561,
    wm_ExitSizeMove = 562,
    wm_DropFiles = 563,
    wm_MDIRefreshMenu = 564,
    wm_IMESetContext = 641,
    wm_IMENotify = 642,
    wm_IMEControl = 643,
    wm_IMECompositionFull = 644,
    wm_IMESelect = 645,
    wm_IMEChar = 646,
    wm_IMEKeyDown = 656,
    wm_IMEKeyUp = 657,
    wm_MouseHover = 673,
    wm_NCMouseLeave = 674,
    wm_MouseLeave = 675,
    wm_Cut = 768,
    wm_Copy = 769,
    wm_Paste = 770,
    wm_Clear = 771,
    wm_Undo = 772,
    wm_RenderFormat = 773,
    wm_RenderAllFormats = 774,
    wm_DestroyClipboard = 775,
    wm_DrawClipbard = 776,
    wm_PaintClipbard = 777,
    wm_VerticalScrollClipBoard = 778,
    wm_SizeClipbard = 779,
    wm_AskClipboardFormatname = 780,
    wm_ChangeClipboardChain = 781,
    wm_HorizontalScrollClipboard = 782,
    wm_QueryNewPalette = 783,
    wm_PaletteIsChanging = 784,
    wm_PaletteChanged = 785,
    wm_Hotkey = 786,
    wm_Print = 791,
    wm_PrintClient = 792,
    wm_HandHeldFirst = 856,
    wm_HandHeldlast = 863,
    wm_PenWinFirst = 896,
    wm_PenWinLast = 911,
    wm_CoalesceFirst = 912,
    wm_CoalesceLast = 927,
    wm_DDE_First = 992,
    wm_DDE_Initiate = 992,
    wm_DDE_Terminate = 993,
    wm_DDE_Advise = 994,
    wm_DDE_Unadvise = 995,
    wm_DDE_Ack = 996,
    wm_DDE_Data = 997,
    wm_DDE_Request = 998,
    wm_DDE_Poke = 999,
    wm_DDE_Execute = 1000,
    wm_DDE_Last = 1000,
    wm_User = 1024,
    wm_App = 32768
} API_WindowMessage;

typedef struct API_SECURITY_ATTRIBUTES {
    Long nLength;
    Long lpSecurityDescriptor;
    Long bInheritHandle;
} API_SECURITY_ATTRIBUTES;

typedef struct API_OVERLAPPED {
    long Internal;
    long InternalHigh;
    long Offset;
    long OffsetHigh;
    long hEvent;
} API_OVERLAPPED;

typedef struct API_LIST_ENTRY {
    long Flink;
    long Blink;
} API_LIST_ENTRY;

typedef struct API_StdGuid {
    long Data1;
    short Data2;
    short Data3;
    Byte Data4[8];
} API_StdGuid;

typedef struct API_STATSTG {
    long pwcsName;
    long stgType;
    struct Int64 cbSize;
    struct Int64 mTime;
    struct Int64 cTime;
    struct Int64 aTime;
    long grfMode;
    long grfLocksSupported;
    struct API_StdGuid ClsID;
    long grfStateBits;
    long Reserved0;
} API_STATSTG;

DEFINE_GUID(IID_IStream,0x20000000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IStream */
#undef INTERFACE
#define INTERFACE IStream

DECLARE_INTERFACE_(IStream, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IStream methods */
    STDMETHOD(Read)(THIS_ Any pv, long cb, long FAR* pcbRead) PURE;
    STDMETHOD(Write)(THIS_ Any pv, long cb, long FAR* pcbWritten) PURE;
    STDMETHOD(Seek)(THIS_ struct Int64 dLibMove, long dwOrigin, struct Int64 pLibNewPosition) PURE;
    STDMETHOD(SetSize)(THIS_ struct Int64 LibNewSize) PURE;
    STDMETHOD(CopyTo)(THIS_ IStream FAR* pstm) PURE;
    STDMETHOD(Commit)(THIS_ API_STGC grfCommitFlags) PURE;
    STDMETHOD(Revert)(THIS) PURE;
    STDMETHOD(LockRegion)(THIS_ struct Int64 LibOffset, struct Int64 cb, long dwLockType) PURE;
    STDMETHOD(UnlockRegion)(THIS_ struct Int64 LibOffset, struct Int64 cb, long dwLockType) PURE;
    STDMETHOD(Stat)(THIS_ struct API_STATSTG FAR* pstatstg, long grfStatFlag) PURE;
    STDMETHOD(Clone)(THIS_ IStream FAR* FAR* RetVal) PURE;
};

DEFINE_GUID(IID_IMalloc,0x1F0F0000L,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IMalloc */
#undef INTERFACE
#define INTERFACE IMalloc

DECLARE_INTERFACE_(IMalloc, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IMalloc methods */
    STDMETHOD_(long, Alloc)(THIS_ long cb) PURE;
    STDMETHOD_(long, Realloc)(THIS_ long pv, long cb) PURE;
    STDMETHOD_(void, Free)(THIS_ long pv) PURE;
    STDMETHOD_(long, GetSize)(THIS_ long pv) PURE;
    STDMETHOD_(Boolean, DidAlloc)(THIS_ long pv) PURE;
    STDMETHOD_(void, HeapMinimize)(THIS) PURE;
};

DEFINE_GUID(IID_IMintHelper,0x7F87FFFFL,0x7710,0x0045,0x7F,0xFF,0x7A,0xCD,0xC6,0x66,0x12,0x34);

/* Definition of interface: IMintHelper */
#undef INTERFACE
#define INTERFACE IMintHelper

DECLARE_INTERFACE_(IMintHelper, IUnknown)
{
BEGIN_INTERFACE
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IMintHelper methods */
    STDMETHOD_(void, memzero)(THIS_ long pDest, long lngSize) PURE;
    STDMETHOD_(long, ReadEAX)(THIS) PURE;
    STDMETHOD_(long, ReadFS)(THIS) PURE;
    STDMETHOD_(void, WriteFS)(THIS_ long fsValue) PURE;
    STDMETHOD_(long, ReadESP)(THIS) PURE;
    STDMETHOD_(void, WriteESP)(THIS_ long spValue) PURE;
    STDMETHOD_(long, ReadCalleeEBP)(THIS) PURE;
    STDMETHOD_(void, WriteCalleeEBP)(THIS_ long bpValue) PURE;
    STDMETHOD_(long, ReadCallerEBP)(THIS) PURE;
    STDMETHOD_(void, WriteCallerEBP)(THIS_ long bpValue) PURE;
    STDMETHOD_(long, ShiftLeft)(THIS_ long Value, long Count) PURE;
    STDMETHOD_(long, ShiftRight)(THIS_ long Value, long Count) PURE;
    STDMETHOD_(long, CalleeThis)(THIS) PURE;
    STDMETHOD_(long, CallerThis)(THIS) PURE;
    STDMETHOD_(long, GetIP)(THIS) PURE;
    STDMETHOD(Reserve)(THIS_ long Length) PURE;
    STDMETHOD_(long, Return)(THIS) PURE;
    STDMETHOD(CallInt32)(THIS_ long FuncPtr, long FAR* retVal) PURE;
    STDMETHOD(CallDbl)(THIS_ long FuncPtr, double FAR* retVal) PURE;
    STDMETHOD(CallInt64)(THIS_ long FuncPtr, Currency FAR* retVal) PURE;
    STDMETHOD(Call)(THIS_ long FuncPtr) PURE;
    STDMETHOD_(long, IncVar32)(THIS_ long FAR* int32Var) PURE;
    STDMETHOD_(long, VarInc32)(THIS_ long FAR* int32Var) PURE;
};

/* Functions defined in module: KernelHelper */

/* Functions defined in module: MSVBVM60 */
    extern long API_VarPtrArray(AnyArr ArrayPtr);

#endif
